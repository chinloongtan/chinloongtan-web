{"pageProps":{"post":{"content":"\n[Jump to solution to see the improvement](#solution)\n\nAbout 3 months ago, I am looking to build an app to explore different type of application that can be built with React Native.\n\nAfter a quick round of idea selection, I decided to build a [file transfer app](https://play.google.com/store/apps/details?id=app.mvphub.filelinkup). Part of the consideration being it scratches my own itch as I regularly transfer files between my Android and iOS devices.\n\n#### 1. Introduction\n\nApp should works\n\n- Offline\n- Send original file without compression / loss of quality\n\n#### 2. Development Journey\n\nInitial attempt was to use bluetooth to achieve that. Since wearables and devices connect and sync data from each other as I experienced it.\nPlus back in the days before cloud solutions, bluetooth file sharing was working okay.\n\nBluetooth technology quickly confuses me it's variation like bluetooth vs. bluetooth low energy (BLE), scanning and connecting devices are a big hurdle before getting into transmitting data between devices.\n\nThen, I am looking for feasible alternative and arrived at a WiFi network approach with TCP socket.\nI am familiar with the paradigm with my experiences working with chat and video streaming applications.\n\nA quick test of the setup with TCP server and client proofs that connecting devices are easier, and sending text data was achieved shortly after.\n\n---\n\nThe first challenge surfaced and it was me asking myself \"How to send image using text string?\".\n\nShortly afterward, I integrated an image picker library into the app and utilized the `base64` encoding to convert the image into a text string, which will be used to send over the connection.\n\nWhile sending the image with `base64` from one side to the other has no issue, another challenge quickly arise.\n\n\"How to know if the file content has finished sending?\" This is so that I can call the `save` function on the receiver, to save the file content.\n\nBrowsing through the internet, I understand that socket will continuously listening to data. It is up to me to either close the socket, and the last bit of data will be flushed out of the buffer and I can save the file when the event `onClose` is triggered.\n\nThat works if I am sending a single file, but what if I am sending multiple files (let's say 100) in one go?\n\nNow the alternative is to send a special string as a delimiter to indicate the termination of the file content.\n\nWith `base64` encoding, `@` is surely not part of the character that will exists, therefore it is a good candidate for this use case.\n\n---\n\nTo think about data in socket connection is to imagine it as a continous string of data that keeps notify you when something new arrived.\n\nNow that I know what to look for to split the data with a delimiter (let's call it `@END@`), here comes the other challenge: knowing where does the file content starts.\n\nThere is a need to transmit information other than the file content. For example, information that informs sender to update the UI when the client successfully saved the file, or data that used for chat messages.\n\nWith the same approach used to determine the `@END@` of a content, now I need to have it for the beginning of a content, (let's call it `@HEAD@`).\n\nNow we are able to separate a whole chunk of content from start to end by identifying `@HEAD@` and `@END@`, regardless whether the content is a file content, or a stringified string.\n\n---\n\nWhen we are sending something in socket, it will not always send it out immediately. There is a concept known as `buffer` that keeps collecting the data and send it out in one go, and we have no control over when it will send out or wait.\n\nWe can imagine it as a waiting area for data to pile up and send out when it is ready.\n\nThis behaviour is important to understand because we need to design our system to be able to process the transmitted data that are not guaranteed to be in it's own chunk from the sender's intention.\n\nFor instance, before sending any content, I will send the header information to the client. From the client's perspective, the first batch of data received, may comprise of header only data or header and content data.\n\nSo the client will need to handle that accordingly.\n\n---\n\nWhen everything is finally in place, I am able to send content between iOS and android devices. With different type of content such as stringified JSON for UI updates or text messages and Base64 string for file content that could be any file.\n\nA huge milestone achieved! ðŸŽ‰\n\nFinally a working file transfer app, from initial ideation which I have no clue how exactly it can be done.\n\n---\n\nThen comes the next challenge.  Transfer speed is slow. Significantly slow with large file, and this is not even multiple files.\n\nAt this point, initially I am about to move on to other features that are more interesting to me, like scan for network for available devices to connect. This will greatly reduce the effort to initiate a transfer of file and have better user experience.\n\nHowever, I chose to work on improving the transfer speed instead. I simply couldn't bear with the slow transfer speed. Despite this means that I probably need to work on native code, which has high degree of uncertainties but I am determined it can be done.\n\n---\n\nFirst step of transfer speed optimization begins with revisiting the existing algorithm that process the incoming data from socket connection.\n\nWith careful refactoring and simplifying logic in loops, I managed to improve the transfer speed from ~100Kbps to ~300Kbps.\n\nThat's 3 times of improvement and have obvious reduction in transfer time. However, the goal is to reach above 1000Kbps because that's what the active incumbents on the market are offering, and I am convinced it can be done, with React Native.\n\nAlso because that's what the whole point of starting this project, to explore and push the limit of app built with React Native.\n\nThe next junction of optimization leads to which path to take to achieve the goal of 1000Kbps transfer speed.\n\nI could either:\n\n- Optimize Javascript code in hope for the next 3x improvement\n- Opt for React Native's new architecture\n- Work with native platform code\n\nWhat I have done was all 3 of them, in the order of the list above.\n\nWell, fast forward today and looking back to the decision, I would still make the same decision if I were to choose again.\n\n---\n\nThere isn't anymore room for optimization working on Javascript code and logic. The bottleneck is the `bridge` that is used for communication between native and JS code.\n\nI came to this realization after spending more time looking for a simple tweak but unfortunately, no easy fix using this approach.\n\nThe next step was to try out the new architecture and hopefully transfer speed will just be faster.\n\nLots of experimentation: enabling new architecture, learn `Codegen`, `Turbo modules`, working with custom JSI binding to send data between native and JS without the bridge, configuring `CMakeLists.txt` for `C++` build, benchmark the performance and so on.\n\nAfter spending 2 weeks learning the rope, the result is not up to expectation. Enabling the new architecture is not a silver bullet for the problem. No significant improve in speed.\n\n---\n\nDespite heading into the wrong direction and invested time without fruitful outcome, finally it is now clear to me, with more learning from the internet about the problem, that I can do it with native module, without new architecture.\n\nThe next steps is to read and browse through the source code of existing native module and figure out a solution.\n\n<a name=\"solution\">So here is the solution:</a>\n\n![diagram](flow.png)\n\nThe transfer speed improve tremendously, exceeded my initial goal way beyond my expectation. It's mind blowing that it reaches 12,000Kbps in good network condition. ðŸ¤¯ 40x improvement from 300Kbps to 12,000Kbps.\n\nTransferring videos and huge files are way much faster now, and multiple files transfer has no issue as well with fast transfer speed.\n\nI am glad it worked out that way but I am far from done with the application. There are just so many exciting features I wanted to implement. It's time to take a break from this development and it's a joy to use to use this app on a weekly basis to transfer files.\n\nCheck out the app and let me know what you think!\n\n[iOS](https://apps.apple.com/us/app/file-link-up/id6464361724)\n\n[Android](https://play.google.com/store/apps/details?id=app.mvphub.filelinkup)\n\nThanks for reading, cheers!\n","frontmatter":{"path":"/blog/socket-programming-for-file-transfer-application","date":"2023-11-08T09:30:00.000Z","title":"Socket programming for file transfer application","excerpt":"The journey of 40x transfer speed improvement","tags":["react-native","node.js"]},"fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2023/11/08-socket-programming/index.md","timeToRead":7}},"__N_SSG":true}