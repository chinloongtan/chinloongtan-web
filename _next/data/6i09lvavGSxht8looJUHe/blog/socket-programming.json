{"pageProps":{"post":{"content":"\nAbout 3 months ago, I am looking to build an app as a side project to explore different type of application that can be built with React Native.\n\nAfter a quick round of idea selection, I decided to build a [file transfer app](https://play.google.com/store/apps/details?id=app.mvphub.filelinkup). Part of the consideration being it scratches my own itch as I regularly transfer files between my Android and iOS devices.\n\n#### 1. Requirements\n\nApp should works\n\n- Offline\n- Send original file without compression / loss of quality\n\n#### 2. Journey\n\nInitial attempt was to use bluetooth to achieve that. Since wearables and devices connect and sync data from each other as I experienced it.\nPlus back in the days before cloud solutions, bluetooth file sharing was working okay.\n\nBluetooth technology quickly confuses me it's variation like bluetooth vs. bluetooth low energy (BLE), scanning and connecting devices are a big hurdle before getting into transmitting data between devices.\n\nThen, I am looking for feasible alternative and arrived at a WiFi network approach with TCP socket.\nI am familiar with the paradigm with my experiences working with chat and video streaming applications.\n\nA quick test of the setup with TCP server and client proofs that connecting devices are easier, and sending text data was achieved shortly after.\n\n---\n\nThe first challenge surfaced and it was me asking myself \"How to send image using text string?\".\n\nNot long after that, I added a image picker library into the app and using the `base64` encoding to get text string, which will be used to send over the connection.\n\nWhile sending the image with `base64` from one side to the other has no issue, another challenge quickly arise.\n\n\"How to know if the file content has finished sending?\" This is so that I can call the `save` function on the receiver, to save the file content.\n\nBrowsing through the internet, I understand that socket will continuously listening to data. It is up to me to either close the socket, and the last bit of data will be flushed out of the buffer and I can save the file when the event `onClose` is triggered.\n\nThat works if I am sending a single file, but what if I am sending multiple files (let's say 100) in one go?\n\nNow the alternative is to send a special string as a delimiter to indicate the termination of the file content.\n\nWith `base64` encoding, `@` is surely not part of the character that will exists, therefore it is a good candidate for this use case.\n\n---\n\n-_Part 2 end_-\n","frontmatter":{"path":"/blog/socket-programming","date":"2023-11-08T09:30:00.000Z","title":"Socket programming","excerpt":"File transfer application","tags":["react-native","node.js"]},"fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2023/11/08-socket-programming/index.md","timeToRead":2}},"__N_SSG":true}