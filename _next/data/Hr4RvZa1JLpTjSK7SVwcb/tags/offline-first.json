{"pageProps":{"posts":[{"slug":"offline-app-with-realm-db","frontmatter":{"path":"/blog/offline-app-with-realm-db","date":"2018-10-04T19:14:00.962Z","title":"Going offline with Realm database","excerpt":"A different approach","tags":["realm-db","offline-first"]},"content":"\nI published an app.\n\nAs a first version, it allows users(mostly me) to check for train schedule in the app.\n\nIt looks like this, as of current writing of this blog.\n\n![app_screenshot](blog_screenshot.jpeg)\n\n<br />\n\n#### API - The initial approach\n\nWell, it is a straight forward app, get the following from user selection:\n- origin station\n- destination station\n\nThen compute the upcoming train and display the time.\n\nWithtout much thought, I created a few APIs, plugged it to the app and start displaying data.\n\nEverything was fine.\n\nUntil when I am setting up for production environment, I realized I couldn't utilize the free tier of Amazon Web Services anymore(expired soon).\n\nI made a quick look up on AWS cost calculator, and roughly have idea what it means for setting up the production server(financially).\n\nFor an app I always wanted to build, for me and my friends' own convenience(I used to always missed the last train), it is going to be ongoing cost as long as it runs.\n\nSince the app is not going to make enough revenue to cover it's own cost of running, I needed an alternative.\n\n<br />\n<hr />\n<br />\n\n#### Enter offline app\n\nI paused the development and thought about the alternatives for a bit.\n\nIt became obvious to me that the app just need access to the database of timetables, routes, and stations in order to work.\n\nAnd if I can have all those data in the device, I don't need API for that.\n\nSo the idea is to use a database in the app, serve the data from it, and let it work offline.\n\nAnd this approach does provide a few benefits.\n\n- Zero cost for maintaining server\n- No backend work required (API, database, devops)\n- I can use the app offline\n\n<br />\n<hr />\n<br />\n\n#### Realm database in action\n\nWhy realm db?\n\nWell it's mainly because of the support for react-native app out of the box.\n\nIt is well documented, offline-first(as promoted), full-fledged mobile database and is performant, have open source version, and the list goes on.\n\nWhy not redux-persist?\n\nWe are talking about 3000+ objects to be stored and accessed, and I think it is not a good idea to use redux-persist in this case (after browsing through their Github issues and quick research for the suitable tools).\n\nTurns out to be a good choice for the work.\n\nWith a major roadblock before publishing the app, but is solved.\n\n<br />\n\n##### Database initializing time\n\nSo it took about 24 seconds to initialize a realm db to load all the schema and their respective seed data I needed for the app.\n\nI have a splash screen shown while initializing it, but it's just too long to wait.\n\n\nSo in a hurry to publish the app as soon as possible (as I did it during a weekend, and weekday will be busy for other works), this is something that will potentially stop the desire to publish the app before the weekday comes.\n\nIt is as if there is only me is having the issue and after revising the documentation over and over again, there is an alternative.\n\nWhat we can do in this case is, we can let Realm to read from existing database and use it.\n\nPerfect!\n\nSo I have a copy of the initialized database(basically a `.realm` file), direct it to Realm when opening database and that's it!\n\nWe don't have to seed the data everytime the app launches! The data is ready to be used.\n\n<br />\n\nNow the app started working offline, and it is just the beginning of offline-first app journey.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/10/04-offline-app-with-realm-db/index.md","timeToRead":3}],"totalCount":1,"tag":"offline-first"},"__N_SSG":true}