{"pageProps":{"allPosts":[{"slug":"migrated-my-blog-from-gatsby-to-nextjs","frontmatter":{"path":"/blog/migrated-my-blog-from-gatsby-to-nextjs","date":"2022-12-06T15:16:00.000Z","title":"Migrated my blog from Gatsby to Next.js","excerpt":"A migration checklist","tags":["next.js"]},"content":"\nMy blog were initially created with `Gastsby` and it has been easy to maintain and writing new blog posts from time to time.\nUntil recently where I am no longer able to publish new blog post unless I upgrade my project due to dependencies issues.\nMy choice was to migrate to `Next.js` because of my experience with other projects that I had set up, all using `Next.js`.\nBelow are some of the issues I faced and I decided to make a checklist out for it.\n\n<hr />\n<br />\n\n#### Migration Checklist\n\n1. Add `react`, `react-dom` and `next` packages\n\n2. Add dev dependencies `autoprefixer` and `postcss`\n\n3. Update scripts\n\n\n```\n  \"dev\": \"next dev -p 8000\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n```\n\n4. Add `next.config.js` and `postcss.config.js`\n\n5. Rename directory `/static` to `/public`\n\n6. Move `/templates/*` to respective routes. Adapt to dynamic routes.\n\n7. Remove `graphql` query in template files\n\n8. Use `getStaticProps` to provide props previously provided by graphql.\n\n9. Use `getStaticPaths` to generate predefined blog post routes.\n\n10. Use `next/head` to replace `react-helmet` for header metadata.\n\n11. Add `react-markdown`, `gray-matter` and `highlight.js` for markdown content.\n\n12. For deployment, changes needed in `next.config.js`.\n\n```\nmodule.exports = {\n  webpack: (config, { isServer }) => {\n    config.module.rules.push(\n      {\n        test: /\\.md$/,\n        use: 'raw-loader'\n      }\n    )\n\n    return config\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  images: {\n    unoptimized: true,\n  },\n  trailingSlash: true,\n}\n```\n\n`trailingSlash` is important for `Next.js` to redirect path without ending `/`. Otherwise, the page will be redirected to `/404`\n\n`unoptimized` is set to `true` because the blog will be exported, and exported build will not enjoy the benefit of optimized image out of the box.\n\n\n13. For deployment to Github pages, add `.nojekyll` to the `/out` directory after build. So that Github pages will recognize `_next` directory and the content inside.\n\n```\n  \"deploy\": \"next build && next export && touch out/.nojekyll && gh-pages -t -d out\"\n```\n\nThe `-t` flag is important to push the changes on `.nojekyll`.\n\n<br />\n\nThat's it!\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/12/06-migrate-from-gatsby-to-nextjs/index.md","timeToRead":2},{"slug":"first-try-rasa-chat-bot","frontmatter":{"path":"/blog/first-try-rasa-chat-bot","date":"2022-10-27T18:55:00.000Z","title":"First try with RASA chatbot","excerpt":"Conversation automation","tags":["backend"]},"content":"\nHaving toying around with RASA bot for a couple of days, I adopted the open source conversational AI framework into a workflow of one of my project.\nThe project requires a chatbot with interactive menu in the UI to get the automation done, and RASA bot is the perfect candidate for that.\n\n<br />\n\n#### Setup\n\nThe setting up of RASA project requires `python` envinronment and tooling.\n\nThis is what works for me.\n\n```\n  python3.8 -m pip install virtualenv\n  mkdir rasa-bot\n  cd rasa-bot\n  python3.8 -m virtualenv venv\n  source venv/bin/activate\n  python3.8 -m pip install rasa\n  rasa --version\n  rasa init\n```\n\n<br />\n\n#### Additional frequently used commands\n\n1. I added `--enable-api` because my application mainly communicate via APIs.\n\n```\n  rasa run --enable-api\n```\n\n2. After making changes to the nlu.yml\n\n`rasa train`\n\n<br />\n\n#### Chat in action\n\nMy application can start replying to conversations by sending the message to my RASA bot server.\n\n`POST http://0.0.0.0:5005/webhooks/rest/webhook`\n\n```\n{\n  \"sender\": \"test_user\",\n  \"message\": \"Hi\"\n}\n```\n\n---\n\nSample response\n\n```\n[\n    {\n        \"recipient_id\": \"test_user\",\n        \"text\": \"Hey! How are you?\"\n    }\n]\n```\n\nThat's a good start, since I can now reply to a conversation from the response from RASA bot.\n\nWe want now move on to train the bot for more specific use case by determining the intent of the message.\n\nAnd we can do this by editing the file in `data/nlu.yml`.\n\nFor example, add\n\n`- salam sejahtera`\n\nto\n\n`- intent: greet`\n\nand run `rasa train` to update the model.\n\n\nWe can also define form depending on the business logic to handle more specific use case. Restaurant reservation/ordering for example.\n\n<br />\n\nThat's all for today!\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/10/27-rasa-chat-bot/index.md","timeToRead":2},{"slug":"send-email-with-nodemailer-and-zoho-mail","frontmatter":{"path":"/blog/send-email-with-nodemailer-and-zoho-mail","date":"2022-02-13T17:45:00.000Z","title":"Send email with nodemailer and Zoho mail SMTP","excerpt":"An alternative to SendGrid","tags":["node.js"]},"content":"\nToday I learned that I can send email with Zoho mail SMTP in my node.js application. Previously I am using SendGrid and decided to browse for alternative, and figured that Zoho mail SMTP is as simple as sending email with SendGrid.\n\n<br />\n\n#### Let's send that email!\n\n1. Add `nodemailer` to your node application\n\n```\nyarn add nodemailer\n```\n\n2. Import and start sending email\n\n```\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  host: \"smtp.zoho.com\",\n  secure: true,\n  port: 465,\n  auth: {\n    user: \"your@zoho.mail\",\n    pass: process.env.ZOHO_APP_PASSWORD,\n  },\n});\n```\n\n```\nconst msg = {\n  to: email,\n  from: 'sender@email.address', // Change to your verified sender\n  subject: 'Your receipt',\n  text: 'Thank you for purchasing with us.',\n  html: emailTemplate, // html string or ejs template\n}\n\ntransporter.sendMail(msg, function(error, info) {\n  // handler\n});\n```\n\nFor the password, it is recommended to use Zoho app password. It works with two-factor authentication enabled for your Zoho account, and is easier to manage in case it is compromised.\n\nThat's it!\n\nHope that helps.\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/02/13-nodejs-mailer/index.md","timeToRead":1},{"slug":"another-react-native-project-upgrade","frontmatter":{"path":"/blog/another-react-native-project-upgrade","date":"2022-02-08T22:02:00.000Z","title":"Another react-native project upgrade","excerpt":"To 0.66.4","tags":["react-native"]},"content":"\nWhile the latest released version for `react-native` is `0.67.2`, I upgraded the project that I am working on to `0.66.4` instead.\n\nThis is mainly due to some issues that I ran into that I decided not to spend too much time fixing it since `0.66.4` is sufficient for my use case.\n\nIn this blog, I will be sharing some of the issues that I ran into and the solutions for them. Hopefully someone might find it useful, and I can also refer to this blog in the near future if I need to upgrade other projects.\n\n<br />\n\n#### The issues\n\n1. folly\n\n```\n\nduplicate symbol 'folly::detail::str_to_bool(folly::Range<char const*>*)' in:\n...\n...\n```\n\nIn my case, I need to do\n\n```\npod update\npod install\n```\n\nNormally you need to run `pod update` after update `react-native` version\n\nor in some cases\n\n```\nrm -rf Podfile.lock Pods/\npod install\n```\n\nif you thing you have messed up the `Pods` after upgrading to different `react-native` versions back and forth.\n\n2. `#<WeakSet> could not be cloned`\n\nThen you might get this issue for any library.\n\n```\nerror node_modules/react-native-vector-icons/lib/create-icon-set.js: #<WeakSet> could not be cloned.\n\nerror: node_modules/react-native-branch/src/branchUniversalObject.js: function (path) {\n          return fn.call(state, path, state);\n        } could not be cloned.\n BUNDLE  ./index.js\n ```\n\nThis has to do with `babel`, so you need to upgrade them as well.\n\n```\nyarn upgrade --dev @babel/core\nyarn upgrade --dev @babel/runtime\n```\n\n3. Android project could not resolve dependencies\n\nError:\n\n```\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCould not determine the dependencies of task ':app:lintVitalBetaRelease'.\n> Could not resolve all artifacts for configuration ':app:betaDebugRuntimeClasspath'.\n   > Could not resolve me.relex:photodraweeview:1.1.3.\n     Required by:\n         project :app > project :react-native-photo-view-ex\n      > Skipped due to earlier error\n   > Could not resolve org.webrtc:google-webrtc:1.0.+.\n     Required by:\n         project :app > project :react-native-twilio-video-webrtc\n      > Skipped due to earlier error\n   > Could not resolve com.yqritc:android-scalablevideoview:1.0.4.\n     Required by:\n         project :app > project :react-native-video\n      > Skipped due to earlier error\n   > Could not resolve com.getkeepsafe.relinker:relinker:1.3.1.\n     Required by:\n         project :app > project :react-native-twilio-video-webrtc > com.twilio:video-android:5.10.0\n      > Skipped due to earlier error\n```\n\nAnother error:\n```\nCould not determine the dependencies of task ':app:lintVitalRelease'.\n> Could not resolve all artifacts for configuration ':app:debugRuntimeClasspath'.\n   > Could not find com.yqritc:android-scalablevideoview:1.0.4.\n     Searched in the following locations:\n       - https://repo.maven.apache.org/maven2/com/yqritc/android-scalablevideoview/1.0.4/android-scalablevideoview-1.0.4.pom\n\n```\n\nThis is due to removal of the line `jcenter()` in `android/build.gradle`. Moving forward, JCenter will not be maintained.\n\nSo it is recommended to remove the depencencies to the repository.\n\n[Read more about the announcement here.](https://reactnative.dev/blog/2021/08/17/version-065#notable-dependency-version-updates-and-gotchas)\n\nAt the meantime, we have libraries that depends on JCenter and it's going to take time for maintainers to update the libraries.\n\nSo we can do this for now for the dependencies we need.\n\n```\n        jcenter() {\n            content {\n                includeModule(\"me.relex\", \"photodraweeview\") // Could not resolve me.relex:photodraweeview:1.1.3.\n                includeModule(\"org.webrtc\", \"google-webrtc\") // Could not resolve org.webrtc:google-webrtc:1.0.+.\n                includeModule(\"com.yqritc\", \"android-scalablevideoview\") // Could not resolve com.yqritc:android-scalablevideoview:1.0.4.\n                includeModule(\"com.getkeepsafe.relinker\", \"relinker\") // Could not resolve com.getkeepsafe.relinker:relinker:1.3.1.\n            }\n        }\n```\n\nSo now you get the idea of using `includeModule`.\n\nThat's all for the issues.\n\nHope that saves your precious time!\n\nCheers.","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/02/08-upgrade-react-native/index.md","timeToRead":3},{"slug":"remove-unused-and-reorder-imports","frontmatter":{"path":"/blog/remove-unused-and-reorder-imports","date":"2022-01-21T15:08:00.000Z","title":"Remove unused and reorder imports","excerpt":"With ESLint and VS Code","tags":["react-native","typescript"]},"content":"\nToday, I revisited the react-native project that was developed and published by me earlier and the first thing I did was to run tests because I intended to add more Typescript support to the project, wanted to know the current state of test suites of the project.\n\nIt wasn't the best FIRST task as a start, but in my opinion, adding more Typescript will be benefiting over the long run.\n\nI've identified removing unused imports to be the low hanging fruit to fix the `tsc` errors.\n\nI started with [https://www.npmjs.com/package/eslint-plugin-unused-imports](https://www.npmjs.com/package/eslint-plugin-unused-imports) but turned out it also removes custom Types import that was used in my files.\n\nThen I found out that VS Code can achieve that with organize import feature.\n\n```\n\"editor.formatOnSave\": true,\n\"[typescript]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n```\n\nThat works also with `Shift` + `Option` + `o` shortcut. However, that will also reorder the imports alphabetically.\nIt seems like there is no way to only remove unused imports without reorder them with `organizeImports`, that being one issue.\nThe second issue is that I need to also press the shortcut keys for every files. Which is very repetitive work, because there are 1105 files in my `/src` directory.\n\n```\n$ find src -type f | wc -l\n  1105\n```\n\nThe second issue was resolved with a VS Code extension to run `organizeImports` in a folder.\n\n[https://marketplace.visualstudio.com/items?itemName=bierner.folder-source-actions](https://marketplace.visualstudio.com/items?itemName=bierner.folder-source-actions)\n\nThen to reorder the imports to my desired orders, I found this great article [https://dev.to/otamnitram/sorting-your-imports-correctly-in-react-213m](https://dev.to/otamnitram/sorting-your-imports-correctly-in-react-213m) that does that.\n\nThis is my config\n\n```\n\"import/order\": [\n  \"error\",\n  {\n    \"groups\": [ \"builtin\", \"external\", \"internal\", [\"parent\", \"sibling\"] ],\n    \"pathGroups\": [\n      {\n        \"pattern\": \"react+(|-*)\",\n        \"group\": \"external\",\n        \"position\": \"before\"\n      },\n      {\n        \"pattern\": \"@**+(/**)\",\n        \"group\": \"internal\",\n        \"position\": \"before\"\n      }\n    ],\n    \"pathGroupsExcludedImportTypes\": [\"react\"],\n    \"newlines-between\": \"always\",\n    \"alphabetize\": {\n      \"order\": \"asc\",\n      \"caseInsensitive\": true\n    }\n  }\n],\n```\n\nJust a TIL from me. That's it! Hope it helps.\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/01/21-remove-unused-and-reorder-imports/index.md","timeToRead":2},{"slug":"ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule","frontmatter":{"path":"/blog/ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule","date":"2022-01-20T15:37:00.000Z","title":"iOS Shared UserDefaults for App Extensions With RCTBridgeModule","excerpt":"Get/Set key-value from both React Native and Swift/Obj-C","tags":["react-native","ios"]},"content":"\nIn this blog post, I will share the code for a simple RCTBridgeModule that can write/read key-value from React Native.\n\nThe use case for this is to access the data in iOS Share Extension using value set from React Native.\n\nSo that the Share Extension can perform API call with sufficient data that was set in React Native, and thus giving user a much better experience similar to other natively built apps. This is a much more complicated implementation and there are much simpler ways to get it done without writing too many native code and that will be for another blog post.\n\nLet's get back and focus on this topic, get and set value in `UserDefaults` that are accesible in Share Extension.\nIn order to achieve that, we need to use `UserDefaults` with `suiteName` that starts with `group.`.\n\nBefore you proceed, please make sure that you have already created Share Extension and updated `App Groups` in the `Signing & Capabilities`.\nThis is not covered in this post and there are alot of online resources for this topic.\n\n<hr />\n\n<br />\n\n##### 1. First, create a header file in xcode.\n\nI'll name it `SharedUserDefaults.h`\n\n```\n#ifndef SharedUserDefaults_h\n#define SharedUserDefaults_h\n#endif\n\n#import <Foundation/Foundation.h>\n\n#if __has_include(<React/RCTAssert.h>)\n#import <React/RCTBridgeModule.h>\n#else\n#import \"RCTBridgeModule.h\"\n#endif\n\n@interface SharedUserDefaults : NSObject <RCTBridgeModule>\n@end\n```\n\n<br />\n\n##### 2. Then, create the implementation file.\n\n`SharedUserDefaults.m`\n\n```\n#import <Foundation/Foundation.h>\n#import \"SharedUserDefaults.h\"\n\n@implementation SharedUserDefaults\n\nRCT_EXPORT_MODULE()\n\n+ (BOOL)requiresMainQueueSetup\n{\n  return YES;\n}\n\nRCT_EXPORT_METHOD(set:(NSString *)suiteName\n                  key:(NSString *)keyName\n                  value:(NSString *)value)\n{\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\n  [shareExtensionDefaults setObject:value forKey:keyName];\n  NSLog(@\"val written %@\", value);\n}\n\nRCT_EXPORT_METHOD(get:(NSString *)suiteName\n                  key:(NSString *)keyName\n                  resolver: (RCTPromiseResolveBlock)resolve\n                  rejecter:(RCTPromiseRejectBlock)reject)\n{\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\n  NSString *val = [shareExtensionDefaults stringForKey:keyName];\n  if (val == nil) {\n    NSError *error = [NSError errorWithDomain:@\"org.reactjs.native.example.Bill\" code:0 userInfo:@{ @\"message\": @\"Empty\" }];\n    reject(@\"error\", @\"error description\", error);\n  } else {\n    resolve(val);\n  }\n}\n\n@end\n```\n\n<br />\n\n##### 3. Next, build and run your app.\n\nAnd you can use the methods from the native module you've just written.\n\nIn your React Native project, you can now get and set key-value pair to UserDefaults via the native module.\n\n```\nimport { NativeModules } from 'react-native';\n\nconst SharedUserDefaults = NativeModules.SharedUserDefaults;\n\n// Usage\n\n// Set\nSharedUserDefaults.set(\"group.org.reactjs.native.example.YourProject\", \"yourKey\", \"some string to be stored\");\n\n// Get\nlet val = await SharedUserDefaults.get(\"group.org.reactjs.native.example.YourProject\", \"yourKey\");\n```\n\nIn iOS, the value can be retrieved in `ShareViewController.swift` or `AppDelegate.m`.\n\n`Swift`\n\n```\nvar userDefaults = UserDefaults(suiteName: \"group.org.reactjs.native.example.YourProject\")\n\n// Get value stored earlier\nlet storedValue = userDefaults?.object(forKey: \"yourKey\") as? String\n\n // Set new value\nuserDefaults?.set(\"some string to be stored\", forKey: \"yourKey\")\n```\n\n`Obj-C`\n\n```\n  NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName: @\"group.org.reactjs.native.example.YourProject\"];\n\n  // Get value stored earlier\n  NSString *val = [userDefaults stringForKey:@\"yourKey\"];\n\n  // Set new value\n  [userDefaults setObject:@\"some string to be stored\" forKey:@\"yourKey\"];\n```\n\n<br />\n\n#### End\n\nYou are now all set!\n\nNow you can set value from React Native and retrieve it in your `ShareViewController.swift`.\n\nThat's it! Hope it helps.\n\nCheers.","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/01/20-shared-users-default/index.md","timeToRead":2},{"slug":"react-native-listen-to-port-other-than-8081","frontmatter":{"path":"/blog/react-native-listen-to-port-other-than-8081","date":"2022-01-17T15:33:00.000Z","title":"React Native Listen to Port Other Than 8081","excerpt":"A different approach using RCT_METRO_PORT","tags":["react-native"]},"content":"\nAfter trying out different solutions attempted to listen to different port other than 8081 for react-native metro bundler.\nFinally I have managed to achieve this **WITHOUT** the hassle of editing files such as:\n\n```\nRCTBridgeDelegate.h\nRTCDefines.h\nRCTInspectorDevServerHelper.m\nRCTDevMenu.m\n```\n\nWhile this approach works, the issue with it is the changes get reset after running `pod install`.\n\nSo after reading alot materials, with some improvisation, I came up with the solution using `Podfile`.\n\n<br />\n\n#### Podfile\n\n```\npost_install do |installer|\n  react_native_post_install(installer)\n  __apply_Xcode_12_5_M1_post_install_workaround(installer)\n\n  installer.pods_project.targets.each do |target|\n    if target.name == 'React-Core'\n      target.build_configurations.each do |config|\n        if config.name == 'Debug'\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] + ['RCT_METRO_PORT=8089']\n        end\n      end\n    end\n  end\nend\n```\n\n<br />\n\n#### Metro server\n\n`npx react-native start --port=8089`\n\n<br />\n\nThat's it! Now, run `pod install` and run the app and it will be listening to port `8089`.\n\nFor Android, change the dev server setting from your device and it is reload the app. This part will not be covered in this article because there are alot of online resources that works perfectly.\n\nHope it helps.\n\nCheers.","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/01/17-react-native-metro-port/index.md","timeToRead":1},{"slug":"pm2-commands-nodejs-backend","frontmatter":{"path":"/blog/pm2-commands-nodejs-backend","date":"2022-01-10T17:06:00.000Z","title":"PM2 commands for your node.js backend","excerpt":"Essentials for deployment","tags":["node.js"]},"content":"\n\nPM2 is a very handy tool to keep your node.js application online. Here's a list of commands that are essential for deployment.\n\n#### Commands\n\n1. `pm2 start --name=web yarn --start` or `pm2 start --name=web --interpreter=bash yarn -- start`\n\nStart your application using `yarn start` with `pm2` and assign a name `web` to the application.\n`--name` is useful for multiple applications in the same server. For example, backend server and web applications.\n\n`--interpreter=bash` if your terminal should run with bash.\n\n<br />\n\n2. `pm2 delete web` or `pm2 delete all`\n\nRemove the process that is running the `web` application, if you assign a name previously. Or otherwise, delete with process id is possible as well.\n\n<br />\n\n3. `pm2 list` or `pm2 status`\n\nShow list of running processes managed by `pm2`.\n\n<br />\n\n\n4. `pm2 logs` or `pm2 logs web`\n\nRetrieve logs of running processes.\n\n<br />\n\n5. `pm2 flush`\n\nRemove currently logged output in log files.\n\n<br />\n\n\n\n#### Config file\n\nIf you have multiple applications to manage, it is recommended to use pm2 config file to manage the config of each application.\n\nIn parent directory:\n\nRun `pm2 ecosystem`\n\nto create a config file, Ecosystem File.\n\nA `ecosystem.config.js` file will be generated.\n\nHere's a sample config file I used for my side project.\n\n```\nmodule.exports = {\n  apps: [\n    {\n      name: 'web',\n      script: 'yarn',\n      args: 'start',\n      cwd: './myproject-web',\n      interpreter: 'bash',\n      instances: 1,\n      env_production: {\n        NODE_ENV: 'production',\n        PORT: 3000,\n      },\n    },\n    {\n      name: 'api',\n      script: 'yarn',\n      args: 'start',\n      cwd: './myproject-backend',\n      interpreter: 'bash',\n      instances: 1,\n      env_production: {\n        NODE_ENV: 'production',\n        PORT: 5000,\n      },\n    }\n  ],\n};\n```\n\nThat's all! Hope it helps.\n\nCheers.","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/01/10-pm2-commands/index.md","timeToRead":2},{"slug":"layout-animation-in-a-nutshell","frontmatter":{"path":"/blog/layout-animation-in-a-nutshell","date":"2021-01-14T21:50:00.000Z","title":"LayoutAnimation in a nutshell","excerpt":"Simple and powerfull, even for complicated layouts","tags":["react-native"]},"content":"\nUsing `Animated` to animate components in `react-native` has been the my go to way of doing things for the past few years.\n\nUntil recently when I discovered that `LayoutAnimation` can achieve similar result in animating component without the hassle of managing the states of the animation.\n\nIn this case, I am trying to animate the `TextInput` of a chat screen, to expand and collapse accordingly when the input starts receiving text, or when it's been cleared.\n\n<!-- Below is the comparison: -->\n\n<!-- <img src=\"./layoutAnimation-before.gif\" width=\"384\" height=\"868\"/>\n<img src=\"./layoutAnimation-after.gif\" width=\"384\" height=\"868\"/> -->\n\nAll I did was adding this magical line before setting the `props/state` that responsible for expanding or collapsing the view.\n\n```\nLayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n```\n\nThis also works great with views with accordions and toggles.\n\nIt is possible to get it work with `Animated` but now that this is way much simpler, I think its worth sharing.\n\nFor more of the detail of using it, check out the official documentation for `LayoutAnimation`.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2021/01/14-layout-animation-in-a-nutshell/index.md","timeToRead":1},{"slug":"android-accessing-cached-image-dir","frontmatter":{"path":"/blog/android-accessing-cached-image-dir","date":"2020-07-26T12:49:00.962Z","title":"Access to android files in cache directory","excerpt":"Using adb cli","tags":["react-native","android"]},"content":"\nYou take a picture from your app, and get back an uri in return.\n\nThen you proceed to upload the photo to server. End of story.\n\nAs a developer, you know that's not always the case, sometimes it's a bit more complicated, you take a snapshot from within the app,\nand realized that it returns black image.\n\nSo you want to debug, and without uploading to server, you can't access to the file,\nto take a look at the state of the image, whether your code changes has fixed the issue or not.\n\nOr you want to manipulate the image before uploading.\n\nFor whatever reason, you want to access to the file in cache.\n\nAfter few failed attempts to get it via tools like `Android File Transfer` and others\nthat can access to the Android file system.\n\nI found the solution with `adb` cli, and here is how to do it, from your Android device.\n\n\n```\nadb shell \"run-as com.yourapp.bundle cat '/data/user/0/com.yourapp.bundle/cache/ReactNative-image1215816883788.jpg' > '/sdcard/DCIM/ReactNative-image1215816883788.jpg'\"\n\nadb pull \"/sdcard/DCIM/ReactNative-image1215816883788.jpg\"\n\n```\n\nThat's it!\n\nNow, check your current directory for the file `ReactNative-image1215816883788.jpg`\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2020/07/26-android-access-to-cached-image-dir/index.md","timeToRead":1},{"slug":"reduce-your-react-native-android-app-size","frontmatter":{"path":"/blog/reduce-your-react-native-android-app-size","date":"2020-07-19T13:11:00.962Z","title":"Reduce your react-native android app size","excerpt":"By 55% with android app bundle (.aab)","tags":["react-native"]},"content":"\nOne of the many things that bother me after my React Native app went public is the app size.\n\nBig app size is not a show stopper to continue adding new features to my app, nor it causes anything bad.\n\nSo, it has always been the least priority to work on that.\n\nSome say it costs a bit of performance, if the app size is too big.\n\nHowever, it isn't really critical for any newly launched app for a premature optimization, on the app size.\n\nI've always wanted to fix it (when I have the time), and I think now is the best time, because I can do it for\n\nmultiple projects that I am juggling, with the same optimization trick.\n\nAnd, it's really simple.\n\nNOTE: This is an Android only optimization.\n\n###### Before\n\n![before](before.png)\n\n<br />\n\n###### After\n\n![after](after.png)\n\n<br />\n\nYou can do it with any *ONE* of two ways below:\n\n#### 1. Android app bundle\n\nSimply change your build process from\n\n`./gradlew assembleRelease`\n\nto\n\n`./gradlew bundleRelease`\n\nThe output will be `.aab` file instead of `.apk` file.\n\nNote that the `.aab` file will not have any significant file size changes compared to the `.apk` file.\n\nThe reduction in size will only be visible after uploaded the `.aab` file to Play Store.\n\n<br />\n\n#### 2. Separate Build by CPU Architecture\n\nIn your project's `android/app/build.gradle` file.\n\nUpdate the following setting.\n\n`def enableSeparateBuildPerCPUArchitecture = true`\n\n```\nsplits {\n    abi {\n        ...\n        enable enableSeparateBuildPerCPUArchitecture // be sure to enable here as well\n        ...\n    }\n}\n```\n\nContinue to build the apk as usual.\n\nThe output will be multiple `.apk` files (usually 4).\n\nEach of the `.apk` file will have significant reduction in app size.\n\nUpload all of them to the Play Store for submission.\n\nWorth to note that, the universal '.apk' file will not be built.\n\n(The one that support all architecture, thus the heavy size.)\n\nIf you want it to be in the output apk, along with the others, change the following setting.\n\n```\nsplits {\n    abi {\n        ...\n        enable enableSeparateBuildPerCPUArchitecture\n        universalApk true  // If true, also generate a universal APK\n        ...\n    }\n}\n```\n\nThen you will have 5 `.apk` files in the output folder.\n\nRead about why enabling the `universalApk` below.\n\n<br />\n\n---\n\n<br />\n\n#### Which one to use\n\nFor most of us, switching to use Android App Bundle (aab) is painless.\n\nThus, recommended to use it.\n\nHowever, here's are some of the things to consider.\n\n<br />\n\n##### 1. Firebase App Distribution does not support (.aab) at the moment.\n\nIf you use Firebase for internal distribution, you might want to use `Separate Build by CPU Architecture` approach, together with `universalApk` enabled.\n\nWhat you can do is, use universal apk file for distribution, and the separated `.apk` files for Play Store submission.\n\nSo, what about if you are using `.aab` file? How can you distribute the app for internal testing?\n\nWell, if there are no existing tools that are already integrated into the app, and need to cater for it,\nthen you might want to consider using Play Store's distribution track.\n\nYou can setup automated process to upload the `.aab` file after building it to the Play Store track.\n\nThis require owner access though.\n\n<br />\n\n##### 2. The reduction in size for both approaches are almost identical.\n\nFrom what I can tell, after experimenting with both approaches, and using both ways for different apps, in production.\n\nThe size reduction benefit is almost identical. In both cases, I got more than 50% in size reduction.\n\nSo the size reduction is not much of a deciding factor. Which makes us move to the next point.\n\n<br />\n\n##### 3. Concern on Android App Bundle's capabilities.\n\nFor most of the app out there, App Bundle offer hassle-free switch.\n\nWhile some of the use cases, it might be more complicated to maintain.\n\nIf you are not sure, refer to official documentation of Android development.\n\nIf you are not convinced, your app doesn't have defined scope and complexity, or your app might\ngrow to eventually having very complicated/advanced use cases, you can stick to separated '.apk' approach.\n\nOtherwise, using `.aab` is recommended.\n\nWell this post is not going to elaborate the differences of '.apk' and '.aab', but it is worth doing your research about the topic.\n\n<br />\n\n---\n\n<br />\n\n#### Conclusion\n\nWith that said, you will have your Android app with very much reduced size by now!\n\nFor my apps, over 50% in reduction.\n\nCheers!\n\nand\n\nHappy coding!\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2020/07/19-android-bundle/index.md","timeToRead":4},{"slug":"upgrading-react-native-project","frontmatter":{"path":"/blog/upgrading-react-native-project","date":"2020-04-27T13:52:00.962Z","title":"Upgrading a 16 months old react-native project","excerpt":"From 0.59.10 to 0.62.2","tags":["react-native"]},"content":"\nThis is not the first time I've upgraded any react-native projects.\n\nI've done it a few times over the years and will be sharing out what I've learnt so far.\n\nTo give you some context regarding the topic, the very same project was upgraded to `0.59.10` since the creation with `react-native init`,\nto comply with the Google Play store regulation for having 64 bit version of the app.\n\nEverything works out fine with `0.59.10`, for the next couple of months.\n\nEspecially one that need to deal with linking of native libraries, most of the packages have no issue with the good old `react-native link` command.\n\nWith that said, I can focus on building features and be very productive with my hours spent working on projects (personal or client projects).\n\nWhich makes me fully occupied with work, and thus not having time for writing/bloging.\n\nNow, let's get back to the topic.\n\n<br />\n\n#### 1. Before the upgrade\n\nBefore any major upgrade (i.e: `0.5x.x` to `0.60.0`), you need to know things are going to be broken, libraries will have issues,\ndeprecated API(s) will affects your app (rather than just deprecation warning), module dependencies and UI look or behaviour will have impacts.\n\nThere are a lot of stuffs that can possibly went wrong. So keep in mind that, upgrading is one part, regression test for your upgraded app is another part.\n\nFor any version upgrades you are going to perform, it is a good practice to have an overview of your `dependencies`, spot for native linked libraries and do a quick check on the potential issues after upgrade.\n\nFor non native linked library, there might be issue is there is a major changes in `react` version itself, but most of the time this will no less of a issue.\n\n\nIn my case, there are 116 packages(dev packages excluded) installed at the point during my upgrades, and 38 of them are natively linked.\n\nSo I am sure it's going to take time for the upgrade to complete. Plus after some searching the internet, I am very sure that the upgrade cannot be completed in\njust few hours of time (in my case).\n\n<br />\n\n#### 2. Reasons for upgrade\n\nSo now you are aware that what a major upgrade will be like, and the time that it will take.\n\nIf there are no major blocker that are holding you back with the current version, I would suggest delaying the upgrade for a few reasons:\n\n- Buffer time for libraries maintainers to support the latest feature/changes with `react-native`\n- Don't fix what isn't broken (with trying to upgrade)\n\nDo it when you are in better position (let say you are ahead with your timeline), or when you have absolute no better choice than to upgrade (i.e: to upgrade to 64 bit support.)\n\nIf you are in the midst of some feature, and that feature requires for a `react-native` version upgrade before continuing, I actually suggest going with alternatives if you can. Or do the upgrade separately, and do enough testing after the upgrade, otherwise you will find yourselves in a rabbit hole trying to fix some errors of another issue in order to make some other issues resolved. You don't want that.\n\nFor example, App Store stops accepting app with WebView since April. You need to use `react-native-webview` (from a specific version onwards), and have your `react-native` project to be at minimum xxx version.\n\nYou thought upgrading is the only option. Well if you are in good hand, for example your project is new and have less dependencies. Upgrading seems like a good choice if that is the case.\n\nOtherwise you want just settled with the alternative, for example, removing the RCTWebView with a script that run on a `postinstall` or `after_install` Podfile, and you are good to god.\n\nChances are if you proceed with the upgrade, your `react-navigation` verison will not compatible with the new version, and you need to upgrade `react-navigation` as well. Say, from `v3` to `v4` with some changes in behaviour. (More on this later)\n\n<br />\n\n#### 3. Which version to upgrade to\n\nIf you are like me, who delaying the upgrade until you have no other choices. Chances are, you have a few major versions to choose from, since the release schedule of React Native now follows a monthly release train.\nSo the question for us is which version to use?\n\nWell, if you have a major upgrade, normally I take the latest version within the major upgrade.\nDepending on the major version of your choice, for my case from `0.59.10`, I can upgrade to `0.60.x`, `0.61.x` or `0.62.x`. (`0.63.x` release candidate are not into consideration)\n\nTo have an overview of the available version, use this command.\n\n`npm show react-native versions`\n\nMy choice of upgrade is to get the latest stable version for this project. Cause if I don't do that, I will need to upgrade again sooner, and I am having huge backlogs in the pipeline after the upgrade. So I want to maximize the window before the next upgrade.\n\nBear in mind that the latest stable version might not always be the best choice to upgrade to. Sometimes you want to upgrade to a version lower that that.\n\nReason for that is the latest stable version might have breaking chances that no open source libraries has adapted yet.\n\nHow to know which to choose from?\n\n1. Inspect your `package.json` file and have a look at the `dependencies` to get an idea. You are the developer of your project and should know more about which libraries will more likely to break after the upgrade.\n2. Have a look at [release changelogs](https://github.com/facebook/react-native/releases)\n\n<br />\n\n#### 4. How to upgrade\n\n<br />\n\n##### 4.1 Clone the project folder\n\nI used to do it in a separate branch, but for this particular upgrade, I am doing it in a cloned folder.\n\nNote: Not cloning from remote and reinstalling everything, I copy/pasted the entire folder to a different directory and start working on the upgrade.\n\nReason?\n\n1. I don't want to re-installing the `node_modules` and `Pods` when I already have it.\n2. The cloned project will build and run without issue.\n3. I don't want to switch branch and then my existing branch is messed up with my upgraded libraries (`node_modules` and so on).\nUpgrade is going on, same goes for bug fixing and feature development. I am still actively developing on the non-upgraded branch.\n4. If the upgrade gone haywire, I can discard the changes in clones folder and not affecting my development flow. And start over again from the cloned folder.\n\nYou want your app to still working if you decided to abort the upgrade half way, or start over again. (Yeah, sometimes, you just have to start over again.)\n\nWhile juggling betweeen bug fixing, new features development, some optimizations, maintaining the code and version upgrade, I want to avoid the upgrade to potentially stop me from my regular work flow.\nIf the upgrade went wrong, I can still fix bug and ship new features of my app to App/Play stores on the main project.\n\n##### 4.2 Use React Native upgrade helper\n\n[React Native upgrade helper](https://react-native-community.github.io/upgrade-helper/)\n\nCheck for code changes before applying it in the project.\n\nOptionally, you can upgrade with `npx react-native upgrade`.\n\nHowever, from the memory of the time I last used it, I don't have a good experience using that.\nI have to resolved conflicts and the worst part was changes on iOS `project.pbxproj` files which is a pain.\n\nEver since then I use upgrade helper and hand-picked the code and manually apply it to my existing project.\nI am happy with that and is aware and consious of what I've changes, so I know where to look for if anything went wrong.\n\nIf my case, upgrading to `0.62.2` only need to change 15 files, which is faster to do hand-picked. (Imagine the time spent on fixing conflicts could be more than that)\n\nPlus, I can exclude the implementation of `flipper` which is a debugging tool included in future versions of `react-native`.\n\nHand picking the lines makes me aware of the additional stuffs that are added (in this case, `flipper`), and I am not including it this time.\n\nReason for doing so is to not have some extra dependencies or code to fix.\n\nI just want to focus on the upgrade and I can live without the debug tool for now.\n\nSince coming from `0.59.10`, I am using my other debugging tool, might as well not introduce uncertainties that will break the product.\n\nI will give `flipper` a try afterwards, but for now, the upgrade is in highest priority.\n\nAfter applying the code changes (or if your are using the upgrade command). Run `yarn install` (or `npm install` depending on your setup.)\n\n##### 4.3 Get your project up and running\n\nAfter installing the versions, if there are no errors. You are good to go to start build and run the project.\n\nAssuming the new packages have no issues, you need to fix the build issues with you app and get it up and running like before.\n\nThe following are the issues that I've encountered and the solution to it.\nI always start debugging with iOS build with xcode. (Just a preference)\n\n1. Run `pod install` and bump into `- ERROR | attributes: Missing required attribute `homepage`.`\n\nSince `0.60.0`, native libraries are now auto linked. That means you don't have to specify the pod in your `Podfile` anymore and React Native will pick that up. (some changes to `Podfile` requires)\nAnd for this reason, native libraries are required to have a `.podspec` file for that to work.\nIf the `homepage` are set to empty string `s.homepage = ''` you will get this issue.\n\nI am getting this issue for this package `https://github.com/Aminoid/react-native-activity-recognition`\n\nThe fix: Fork the repository and add a homepage to it. (There are another issue with this library's podspec, so forking the library is a better choice, more about this later)\n\n2. `CocoaPods could not find compatible versions for pod \"React/Core\":`\n\nThis is a issue with `react-native-image-crop-picker` library. Upgrading the library will fix it.\nSince the dependency is now `React-Core`.\n\n3. `YOUR_PROJECT_PATH/node_modules/react-native/React/Modules/RCTEventEmitter.h:8:9: 'React/RCTBridge.h' file not found`\n\nGot this issue for `react-native-audio-recorder-player`. As you can tell, upgrading the library will fix it.\n\n4. `'React/RCTDefines.h' file not found`\n\nThis one has to do with `AppCenter` packages.\n\nAnd the fix for this is well documented [here](https://docs.microsoft.com/en-us/appcenter/sdk/troubleshooting/react-native).\n\n5. `<React/RCTBridgeModule.h> file not found`\n\nNow this is the real tricky part.\n\nAt this point, the header file is missing, and we are not sure, whether it is an error that only happens to this library only or all other libraries.\nFor this, there is a way to inspect the issue.\n\nThis is very well written in this Github comment, so I am not going to elaborate futher.\n\nhttps://github.com/facebook/react-native/issues/26665#issuecomment-571082076\n\nIn short, I have to remove the `target.remove_from_project` from `Podfile` `post_install`\n\nthen\n\n```\npod deintegrate\npod cache clean\npod install\n```\n\n(not enough with just removing the `Pods` directory)\n\nand add the missing react back to scheme > build (for all the targets!)\n\n6. Remove from `Libraries` folder in xcode, all the `.xcodeproj` and all the `xxx.a` from `Build Phases > Link Binary with Libraries` from native libraries if you haven't.\n\nOr use `react-native unlink` (but again, I do it manually from xcode, because I don't want to unlink for android yet, as it turns out, android works without unlinking, but is is now redundant.)\n\nOtherwise app will have duplicated headers from Pods and the Libraries projects.\n\n7. `MKTouchableManager.m:11:9: error: 'UIView+React.h' file not found with <angled> include; use \"quotes\" instead`\n\nThen I am having this issue with `react-native-material-kit`. I use this for ranged slider with two thumbs. Looking for alternatives, but I am fixing this one first.\n\nTurns out upgrading the project to the latest version fixed the issue.\n\n8. `No known class method for selector 'configure'`\n\nThen this issue, from firebase, basically I need to use firebase v6 instead of v5. Well, another breaking changes.\nSince local push notification are no longer usable in v6. I need to find solution for that. So in this case, upgrade to v6,\nand comment out implementation for local push notification and come back to this later.\n(Remember, we want to build and run the app and not spending too much time replacing the implementation and then we don't know why it is not working. Do one thing at a time. Complete the upgrade first.)\n\nUpgrading to v6 has no much issues, also because the only thing that was in used with firebase is the local push notification. (but there are plans to use the Crashlytics, part of the reason why the upgrade is done)\nAnd of course, the documentation on the website is great. I am using `react-native-firebase`. (Sometimes the documentation update is so frequent that old documentation is not there anymore, so just keep up to date with the latest version as best as you can.)\n\n---\n\nAt this point, the app can be built and run on simulator already.\n\n---\n\n9. `Invariant Violation: Native module cannot be null.` and `'React/RCTEventEmitter.h' file not found`\n\nThis is from the `react-native-activity-recognition` library I am using. Second issue from the same library.\nAnd it has to do with a incorrect path in `podspec` being used. Before this I fixed it with importing the project to library and manually link the library code.\nBut now I need to use Podfile and this has to be fixed with updating the `podspec` of the library.\n\nSolution: Fork the repository, update the `podspec` and install it in your app.\n\n10. `null is not an object (evaluating '_ReanimatedModule.default.createNode')`\n\nThis has to do with `react-native-tab-view`. Upgrade the `react-native-tab-view` and `react-native-reanimated` to the latest version.\nRun `pod install` for `react-native-reanimated` to be updated.\n\n11. `Undefined is not an object (evaluating 'navigator.geolocation.getCurrentPosition')`\n\n`navigator` is no longer available from the global object.\nInstall and use the it from `https://github.com/react-native-community/react-native-geolocation` instead.\n\n12. Also deprecated APIs are: `ViewPager` and `ListView`\n\nIf you are using libraries that depends on these APIs, you will need to upgrade the library as well. Or replace/remove the APIs in your app.\n\n13. `Cannot read property measureInWindow of undefined`\n\nIssue with `react-navigation` v3. You will need to use v4 or v5.\n\nFrom v3 to v4 has some minor changes. From v3 or v4 to v5 will have API changes. So upgrade with care.\n\nFor me, I opt to upgrade to v4 and still have some unexpected changes in behaviour. And need to fix it.\n\nAs you know, the local push notification is now broken, so I want to just stay with v4 to have less code that broken.\n\nAnd when the app are back up to where, then I will consider upgrading to v5.\n\n14. `TypeError: Cannot call a class a function`\n\nThis is a changes in the code that I wrote, it is now illegal to do that, I haven't investigated further whether the changes is from `react-navigation` or `react` library.\nBut I managed to figured out the issue.\n\nCode with issue: (works with `0.59.10`)\n\n```\nheaderLeft: NavHeader.Back,\n```\n\nCode changes after the upgrade:\n\n```\nheaderLeft: props => <NavHeader.Back {...props} />\n```\n\nYou should be able to tell what's wrong from the error description. (`NavHeader` is a class component)\n\n15. Issue with PagerPan from `react-native-tab-view`\n\nCode with issue:\n\n```\nimport { TabView, SceneMap, PagerPan } from 'react-native-tab-view';\n```\n\nCode changes:\n\n```\nimport { TabView, SceneMap, ScrollPager as PagerPan } from 'react-native-tab-view';\n```\n\nHowever, even after the fix, the behaviour is not the same, therefore more work has to be done to disable animation and swipe on the tab.\n\n\n16. `AirGoogleMaps` dir must be added to your xCode project to support GoogleMaps on iOS.\n\nUpgrade the library and make sure to run `pod install`\n\n##### End\n\nHopefully my writing can help you with the upgrade. Happy coding.\n\nI will be writing up with the upgraded project next.\n\n<br />\n\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2020/04/27-upgrade-rn/index.md","timeToRead":12},{"slug":"gps-testing-with-gpx","frontmatter":{"path":"/blog/gps-testing-with-gpx","date":"2018-12-20T16:57:00.962Z","title":"GPS testing with .gpx file","excerpt":"For faster development","tags":["gps"]},"content":"\nSometimes, your app needs more than just accessing the current location.\n\nFor example, you want to watch the location over time, whether to show it on the map or other features than make use of the location.\n\nWe can provide a current location for the simulator, however, we can't provide a lists of locations that showing the movement of the app over time with the default simulator settings.\n\nLuckily for us, as developer, we are able to mock the locations of the app using `.gpx` file.\n\n<br />\n\n##### How it works\n\n<br />\n\n`.gpx` is a format to save GPS data. Basically it contains latitude, longitude and the timestamps at which the points are at.\n\nA simple `.gpx` file looks like this.\n\n```\n<?xml version=\"1.0\"?>\n<gpx version=\"1.1\" creator=\"gpxgenerator.com\">\n<wpt lat=\"3.109193\" lon=\"101.461774\">\n    <ele>7.00</ele>\n    <time>2018-01-04T08:08:05Z</time>\n</wpt>\n<wpt lat=\"3.109562\" lon=\"101.461968\">\n    <ele>7.00</ele>\n    <time>2018-01-04T08:08:20Z</time>\n</wpt>\n<wpt lat=\"3.109193\" lon=\"101.461774\">\n    <ele>6.96</ele>\n    <time>2018-01-04T08:08:35Z</time>\n</wpt>\n</gpx>\n```\n\nWhen you have that file, add it to your xcode, and you will be able to use the coordinates in your simulator with a toggle.\n\n![demo](gpx-xcode.png)\n\nSo for my case, I am having 3 different paths I created for development and testing purpose. Each of them in its own `.gpx` file.\n\nSelect any one, and the simulator will pick up the location and changes over time.\n\n<br />\n\n##### End\n\nNow you have different coordinates as time passes returned from the simulator to test.\n\n<br />\n\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/12/20-gps-testing-with-gpx/index.md","timeToRead":2},{"slug":"background-geolocation","frontmatter":{"path":"/blog/background-geolocation","date":"2018-12-17T17:47:00.962Z","title":"Background geolocation","excerpt":"Processing location update events","tags":["gps"]},"content":"\nAccessing user current location in the app is a common practice nowadays. Depending on the usage of the location data, a common use case is to present the data in a sorted by distance filter.\n\nSay, a restaurant app, where you want to see the nearest restaurant first.\n\nI have been fortunate to work on a complicated geolocation aware app, where I need to track the changes of the GPS location over time.\n\nThink of it like a fitness app, or a more popular example will be the pokemon app.\n\n<br />\n\n#### The existing solution\n\nWhile most app would be enough with a listener watching for the GPS location update, the one I am working on needs more.\n\nBasically, it is a fitness app to track jogging pattern. It needs to work when the app is in background, and offline (for some of the time).\n\nThe current available location listener `watchPosition` seems to be great for the work, until it is not.\n\n<br />\n\n#### The problem\n\nThe app needs to work together with a geo-fencing ability to detect if a user is within an action zone, where it will trigger a log, and the network request (if network connection is good).\n\nSo the main challenge is to get it to work when the app is in background, and I want to be able to detect the event as soon as the user enters the zone.\n\n<br />\n\n#### Background geolocation to the rescue\n\nIn order to be able to achieve that, this package ([https://github.com/mauron85/react-native-background-geolocation](https://github.com/mauron85/react-native-background-geolocation)) has done incredible work the background location.\n\nHowever it is not a silver bullet for all the problems out there, the app I wanted to build are meant for fitness and jogging, so there are a different configuration needed to be able to adapt to my use case.\n\n<br />\n<hr />\n<br />\n\n\n#### Key takeaway\n\nCouple the package with other features, such as drawing the jogging path on a map, show the geo-fencing zone on the map is more reliable and complete thanks to a more frequent location updates, event in the background.\n\nIt is advisable to create a couple of `.gpx` files to mock the location, otherwise the development with geolocation would be miserably slower.\n\nMore about this part in the future. Now that you know how to get location updates even app is in the background, you will be able to build a better app!\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/12/17-background-geolocation/index.md","timeToRead":2},{"slug":"woocommerce-powered-mobile-app","frontmatter":{"path":"/blog/woocommerce-powered-mobile-app","date":"2018-11-06T14:17:00.962Z","title":"WooCommerce powered mobile app","excerpt":"Increase customer engaegement for your e-commerce site","tags":["e-commerce"]},"content":"\nE-commerce is eating the retail world, and mobile app is playing an important role.\n\nIf you own an e-commerce website, you should consider having an app for your business,\n\nbecause people tend to use mobile apps more ofthen than mobile web browser,\n\nand if you are running your e-commerce site with Wordpress WooCommerce, there is a good news for you.\n\n<br />\n\n#### Backend ready with WooCommerce API\n\nWith WooCommerce API, you are good to go with the existing backend for your new mobile app.\n\nI am not going into detail how to enable REST API for your WooCommerce site.\n\nLet's just dive into developing the mobile app with it.\n\nHere are the [API docs](http://woocommerce.github.io/woocommerce-rest-api-docs/) to start with.\n\n<br />\n\n##### Authentication\n\nWooCommerce API provides `/customers` and `/token` endpoints for sign up and login purpose.\n\nHowever, do take note that the base url is different for `/token` in this case.\n\nTo generate a token and hence login a user, you need to use `/wp-json/jwt-auth/v1/token`.\n\nWhereas for the rest of the API, use `/wp-json/wc/v2/` as base url instead.\n\nHowever, there are a pitfall in the authentication/customers module, which is reset a user password.\n\nTo reset a password, WooCommerce did not provide an endpoint for that,\n\nbut considering the amount of time saved for the rest of the available APIs, this is some what tolerable.\n\nNot to mention there are ways around it.\n\n<br />\n\n##### Products\n\nThis endpoint is pretty much perfect for showing list of products for viewing, with pagination options and lots of other metadata like available stocks, prices etc.\n\nYou can also build product reviews screens with the `Product reviews` module. Pretty neat.\n\n<br />\n\n##### Shopping cart & Checking out\n\nPerhaps the most important feature of all e-commerce apps.\n\nWooCommerce doesn't provide cart module. This is left for developer to implement own cart and checkout system.\n\nHowever, it is not hard to build one. I will cover this part in future blog topic.\n\n<br />\n\n##### Orders\n\nCustomers place orders and with this module, you are good to go to show the purchase history, order status and etc.\n\nYou can also view purchased item and their respective prices with a bit of twist.\n\n<br />\n\n##### Payment\n\nWell this could be a bit tricky because in order to have good user experience, it is advisable to go with native implementation of payment gateway(because you are just one step away from making a sale!).\n\nSo you want to be extra careful here. Luckily for most payment gateway provider(that I've used so far), mobile support is available and somewhat considered good for certain provider.\n\n<br />\n<hr />\n<br />\n\n\n#### Key takeaway\n\nOverall it is time saving to use WooCommerce API considering that most APIs are ready to be consumed for mobile app. Products, reviews, customers and orders modules are well taken care of.\n\nDeveloper just need to integrate with payment gateway and implement a shopping cart & check-out module for a complete e-commerce app.\n\nSo with the time saved, it means more time for better UI/UX, or simply reduction in development cost.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/11/06-woocommerce-api/index.md","timeToRead":3},{"slug":"offline-app-with-realm-db","frontmatter":{"path":"/blog/offline-app-with-realm-db","date":"2018-10-04T19:14:00.962Z","title":"Going offline with Realm database","excerpt":"A different approach","tags":["realm-db","offline-first"]},"content":"\nI published an app.\n\nAs a first version, it allows users(mostly me) to check for train schedule in the app.\n\nIt looks like this, as of current writing of this blog.\n\n![app_screenshot](blog_screenshot.jpeg)\n\n<br />\n\n#### API - The initial approach\n\nWell, it is a straight forward app, get the following from user selection:\n- origin station\n- destination station\n\nThen compute the upcoming train and display the time.\n\nWithtout much thought, I created a few APIs, plugged it to the app and start displaying data.\n\nEverything was fine.\n\nUntil when I am setting up for production environment, I realized I couldn't utilize the free tier of Amazon Web Services anymore(expired soon).\n\nI made a quick look up on AWS cost calculator, and roughly have idea what it means for setting up the production server(financially).\n\nFor an app I always wanted to build, for me and my friends' own convenience(I used to always missed the last train), it is going to be ongoing cost as long as it runs.\n\nSince the app is not going to make enough revenue to cover it's own cost of running, I needed an alternative.\n\n<br />\n<hr />\n<br />\n\n#### Enter offline app\n\nI paused the development and thought about the alternatives for a bit.\n\nIt became obvious to me that the app just need access to the database of timetables, routes, and stations in order to work.\n\nAnd if I can have all those data in the device, I don't need API for that.\n\nSo the idea is to use a database in the app, serve the data from it, and let it work offline.\n\nAnd this approach does provide a few benefits.\n\n- Zero cost for maintaining server\n- No backend work required (API, database, devops)\n- I can use the app offline\n\n<br />\n<hr />\n<br />\n\n#### Realm database in action\n\nWhy realm db?\n\nWell it's mainly because of the support for react-native app out of the box.\n\nIt is well documented, offline-first(as promoted), full-fledged mobile database and is performant, have open source version, and the list goes on.\n\nWhy not redux-persist?\n\nWe are talking about 3000+ objects to be stored and accessed, and I think it is not a good idea to use redux-persist in this case (after browsing through their Github issues and quick research for the suitable tools).\n\nTurns out to be a good choice for the work.\n\nWith a major roadblock before publishing the app, but is solved.\n\n<br />\n\n##### Database initializing time\n\nSo it took about 24 seconds to initialize a realm db to load all the schema and their respective seed data I needed for the app.\n\nI have a splash screen shown while initializing it, but it's just too long to wait.\n\n\nSo in a hurry to publish the app as soon as possible (as I did it during a weekend, and weekday will be busy for other works), this is something that will potentially stop the desire to publish the app before the weekday comes.\n\nIt is as if there is only me is having the issue and after revising the documentation over and over again, there is an alternative.\n\nWhat we can do in this case is, we can let Realm to read from existing database and use it.\n\nPerfect!\n\nSo I have a copy of the initialized database(basically a `.realm` file), direct it to Realm when opening database and that's it!\n\nWe don't have to seed the data everytime the app launches! The data is ready to be used.\n\n<br />\n\nNow the app started working offline, and it is just the beginning of offline-first app journey.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/10/04-offline-app-with-realm-db/index.md","timeToRead":3},{"slug":"ipay88-react-native-integration","frontmatter":{"path":"/blog/ipay88-react-native-integration","date":"2018-09-25T21:28:00.962Z","title":"iPay88 integration with react native","excerpt":"The undocumented part","tags":["payment"]},"content":"\nSo you need a payment gateway for your react-native app, and for any reason, your only best choice is [iPay88](https://www.ipay88.com/).\n\n<br />\n\n#### The good news\n\nYou don't have to write your own sdk wrapper library.\n\nThere is already an open source library for you.\n\nIf you are looking to integrate iPay88 into your react-native app, take a look at [this library](https://github.com/myussufz/react-native-ipay88-sdk).\n\nI must say it is an awesome work from the developer.\n\n<br />\n<hr />\n<br />\n\n#### The bad news\n\nYou got to be extremely **patience**.\n\nChances are, you are going to spent a lot of time to get your issue (not your ticket) resolved.\n\nSo be earlier in your integration, do it as soon as possible!\n\n<br />\n<hr />\n<br />\n\n#### The undocumented part\n\nTo provide a bit of context to my experience, here is what I am trying to do:\n\n- integrate iPay88 and enable Alipay\n\nIf you are trying to enable credit card or online banking, you might have better experience integrating it.\n\n<br />\n\n##### PaymentId\n\nSo in order to enable selected/subscribed payment method, we need to provide `paymentId` for respective payment method, and in my case, for Alipay.\n\nAlipay is supported by the platform(that's why it is chosen), but there is no documentation on the `paymentId` that need to be used, and you get `Invalid parameters(Payment Not Allow)` error.\n\nA ticket was submitted, and got a response the next working day with a link in it to integrate by using \"standard integration API doc\".\n\nThen you get the same documentation and it don't have the `paymentId` for Alipay.\n\nThe cycle repeats.\n\nAnother ticket was submitted, with greater precision on the issue(to avoid getting another reply with a link).\n\nThis time is different, I was asked to provide the merchant code, and redirect to contact with account manager.\n\nAfter few more rounds, finally you got what you want. The `paymentId` for Alipay payment method.\n\nHowever, it still didn't work.\n\nWhat now?\n\n`Invalid parameters(Payment Not Allow)`\n\n<br />\n\n##### Currency\n\nSo the above cycle, repeats again.\n\nIt was due to unsupported currency that caused it, but you only can know after a lot of emails, and many days later.\n\nSo be sure to ask about the supported currency if you are integrating Alipay with iPay88.\n\n<br />\n<hr />\n<br />\n\n#### Key takeaway\n\n1. When in doubt, or facing issue, **directly contact account manager**.\n2. Integrating iPay88 in react-native app **takes relatively longer time** than other payment gateways, like Stripe or Braintree.\nThere is no sandbox account or test account and mostly require time checking with account manager and communicating to and fro.\n3. Use the right **merchant code**, ask your account manager for confirmation. Generally, it is different from the web one.\n4. Make sure to handle the **BackendPostURL** in your backend.\n\n<br />\n\nIf you are curious on the solutions, here you go.\n\nYou need to pass in `paymentId: 118` and `currency: 'CNY'` if you are using Alipay.\n\niPay88 is great to be used for web integration. However, when it comes to mobile, there needs to be improvements.\n\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/09/26-ipay88-rn-integration/index.md","timeToRead":3},{"slug":"aws-config-vs-aws-credentials","frontmatter":{"path":"/blog/aws-config-vs-aws-credentials","date":"2018-05-09T00:41:02.962Z","title":"aws/config vs aws/credentials","excerpt":"Get it right","tags":["aws"]},"content":"\nThere are time when you have multiple AWS access keys and secrets.\n\nEach key are able to access the AWS resources/services, depending on the given permissions.\n\nIdeally those keys only have access to the resources that are needed, nothing more.\n\nHowever, it might still happen that you are accessing the same services, but for different accounts.\n\nLet say pushing files to S3 bucket, but instead of pushing to your work/company AWS account, you want to push it to your personal one.\n\nSo you want to make sure you are passing in the right configurations for the command.\n\n#### AWS Profile\n\nWhat you are looking for is AWS *profile* management. (I made that up, but you get the idea.)\n\nYou can have a quick look at your current profiles using this command.\n\n```\n$ cat ~/.aws/config\n```\n\nWell, to save you some typings, here's mine.\n\n```\n[default]\nregion = ap-southeast-1\noutput = text\n\n[profile docker-repository]\nregion = us-west-2\n\n[profile eb-cli]\naws_access_key_id =\naws_secret_access_key =\n\n\n[profile chinloong]\naws_access_key_id =\naws_secret_access_key =\nregion = ap-southeast-1\n```\n\nYou guessed it right. **default** configurations will be used if no profile is spcified explicitly.\n\nNew profile can be created by following the pattern you can derived from the file.\n\n`[profile staging]`\n\n\nand passed it as an argument in the command as\n\n`--profile staging`\n\nFor example:\n\nI am trying to deploy files to S3 bucket to use it in static web hosting.\n\n```\ns3-deploy './public/**' --cwd './public/' --profile chinloong --bucket your-bucket-name --deleteRemoved --gzip\n```\n\nBad news is, it won't work.\n\nYou will probably get:\n\n```\n(node:82129) UnhandledPromiseRejectionWarning: Upload error: CredentialsError: Missing credentials in config (CredentialsError: Missing credentials in config\n```\n\n#### The missing part\n\n```\n$ cat ~/.aws/credentials\n```\n\nMake sure these two configs are there.\n\n```\naws_access_key_id =\naws_secret_access_key =\n```\n\nDid I mentioned about the profile name?\n\nBefore I forgot, you can specify the profile name those configs are for.\nBut watchout for the missing **profile** word.\n\n\nThe full block looks like this. (Instead of `[profile staging]`)\n\n```\n[staging]\naws_access_key_id =\naws_secret_access_key =\n```\n\nYou are now good to go!\n\n\n#### Explanation\n\nSo we have\n\n```\n~/.aws/config\n```\n\nand\n\n```\n~/.aws/credentials\n```\n\nIn short, use\n\n`~/.aws/credentials` for sensitive config like your access key and secret.\n\n\n`~/.aws/config` for less sensitive config like `region=us-west-2` or `max_concurrent_requests=10`\n\n\nHope that clears up things a bit for you! 😀\n\nYou can also set the profile as environment variable.\n\n```AWS_PROFILE=staging s3-deploy ...```\n\n\nFull explanation?\n\nRead it here. [https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html)\n\nand here [https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/05/07-aws-config-vs-aws-credentials/index.md","timeToRead":2},{"slug":"billing-for-aws-provisioned-iops","frontmatter":{"path":"/blog/billing-for-aws-provisioned-iops","date":"2018-05-02T11:59:02.962Z","title":"Billing for AWS Provisioned IOPS (io1)","excerpt":"Watch out before it's too late","tags":["aws"]},"content":"\nThis will be applicable for services with the rate that looks like this:\n\n$X per `provisioned IOPS-month`\n\nFor example, it could be `RDS` (Relational Database SErvice), or `EBS` (Elastic Block Store).\n\n![rate](rate.png)\n\nThe rate shown above is the rate for RDS of instance type `Provisioned IOPS SSD (io1) Volumes`.\n\nIf you have created the instance (or could be created by another service), but not sure what that means to your bill.\nChances are you might not need it, or otherwise, be prepared for a higher bill amount.\n\nHow the bill are calculated for provisioned IOPS-month type of instance:\n\n$0.11 * 1000 IOPS * number of hours\n\n= $110 for 1 month\n\n= $3.67 for 1 day\n\nThat's for 1000 IOPS for an instance.\n\n---\n\nAlso, please take note that:\n1. Provisioned IOPS SSD (io1) volumes are **not included** in the AWS Free Tier\n2. They are not charged by usage of I/O, but the **amount of IOPS enabled/provisioned**.\n\nSo if you enable an instance of 8000 IOPS of io1, but only used a bit of it, you will still be charged for\n\n$0.11 * 8000 * number of hours\n\n\n<br />\nPlus, there will be a charge for the storage rate. Refer to the image attached above.\n\n`$0.138 per GB-month`\n\n<br />\n\nSo, if you are not sure, probably a General Purpose SSD (gp2) volume is your right choice.\n\nRefer to the [EBS pricing](https://aws.amazon.com/ebs/pricing/) for another example. (the IOPS-month rate is applicable for RDS as well)\n\n\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/05/02-provisioned-iops-billing/index.md","timeToRead":2},{"slug":"processcolor","frontmatter":{"path":"/blog/processcolor","date":"2018-04-25T12:20:02.962Z","title":"processColor API","excerpt":"Color string meet native code","tags":["tool"]},"content":"\n    import { processColor } from 'react-native';\n\nThis is not the typical API you will use when working with React Native.\n\nWhen working with iOS libraries, chances are you will need to use `UIColor`, and that's when you can use `processColor`.\n\nI am researching for drawing board application written in React Native, and came across this package.\n\n[https://github.com/terrylinla/react-native-sketch-canvas](https://github.com/terrylinla/react-native-sketch-canvas)\n\n\nOut of curiosity on how it was done, I started digging into the implementation.\n\nSo we can pass `processColor('#00FFFF')` in the argument and it is ready to be accepted as `(UIColor*) colorVar` in `RCT_EXPORT_METHOD`.\n\n\nRefer [processColor](https://github.com/terrylinla/react-native-sketch-canvas/blob/master/src/SketchCanvas.js#L94) usage in React Native.\n\nand corresponding [native method](https://github.com/terrylinla/react-native-sketch-canvas/blob/master/ios/RNSketchCanvas/RNSketchCanvas/RNSketchCanvasManager.m#L53) in iOS.\n\nIt is glad to know that such API exist, it will definitely come in handy when bridging native code.\n\nSure it has different usage worth exploring.\n\n---\n\nFor those who are curious. Check out the implementation of `processColor` over [here](https://github.com/facebook/react-native/blob/master/Libraries/StyleSheet/processColor.js).\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/04/25-processcolor/index.md","timeToRead":1},{"slug":"crna-expo-react-native-init","frontmatter":{"path":"/blog/crna-expo-react-native-init","date":"2018-04-17T12:04:02.962Z","title":"CRNA, Expo or react-native init for your next project","excerpt":"Create your project with the right tool","tags":["tool"]},"content":"\nIn today's topic, we will cover the details you need to know to make the decision.\n\nWhether to use\n\n    create-react-native-app MyAwesomeApp\n\nor\n\n    exp init HelloExpo\n\nor\n\n    react-native init VanillaRN\n\n\n`create-react-native-app` (CRNA) was [introduced to the community](https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html) on March 13, 2017.\nWith the intention to make developers life easier without have to deal with native dependencies in Xcode or Android Studio.\n\nHere is how you typically starts and run a new project with CNRA.\n\n    create-react-native-app MyCRNA\n    cd MyCRNA\n    yarn start\n    i\n\nYou get your iOS simulator running within minutes from project initialization and are ready to start coding right away.\n\nWhile not having to open Xcode and run the project from there is nice, it's not the idea of using CRNA we are talking about here.\n\nIt's worth mentioning that we can run new project on iOS simulator/Android emulator because of these commands, which available to any ways of creating the project.\n\n    react-native run-ios\n    react-native run-android\n\n\nWhat we need to appreciate that the beauty of creating project with CRNA is we are able to leverage on Expo's cool features(from Expo SDK, included during initialization).\n\nHere's two of them that I am highlighting:\n\n1. Access to Expo SDK API\n2. Run project on real devices without hassle\n\n<br />\n<hr />\n<br />\n\n#### 1. Access to Expo SDK API\n\nNotice the amount of work to add vector icon and MapView with Expo.\n\n- Add icon\n\n![Add icon code changes](addIconCodeChanges.png)\n\n\n- Add MapView\n![Add MapView code changes](addMapCodeChanges.png)\n\n\n- Output\n![Output](addMapOutput.png)\n\n\nWithout having to link native libraries, we are now able to use\n\n`import { Ionicons } from '@expo/vector-icons';`\n\nwhich is built on top of [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)\n\nand\n\n`import { MapView } from 'expo';`\n\nthat built by [airbnb/react-native-maps](https://github.com/react-community/react-native-maps)\n\nIf you are not convinced that this will save a lot of your time, try go through the installation instructions for\n[react-native-maps](https://github.com/react-community/react-native-maps/blob/master/docs/installation.md)\nand\n[react-native-vector-icons](https://github.com/oblador/react-native-vector-icons#installation).\n\n\n<br />\n<br />\n\n#### 2. Run project on real devices without hassle\n\nAll you need to do is scan QR code from your console(provided after `yarn start`) using Expo client app and you are good to go.\n\nNo cable connection needed.\n\nPlus, you can share the link to others to start testing the app, just need an Expo client installed.\n\n<br />\n\nAs of the writing of this topic, I am running Expo client version 2.4.7 on my iOS device, and wen can't scan the QR code from the app anymore to open the project.\n\nMore about the changes [here](https://blog.expo.io/upcoming-limitations-to-ios-expo-client-8076d01aee1a).\n\nAlternatively, you can send link to open the project via SMS or Email.\n\nOr, you can still scan the QR code via your device's camera, and it will still prompt to open the project in Expo client.\n\n\n<br />\n<hr />\n<br />\n\n#### CRNA or exp\nWe have been talking a lot about Expo now, although it is a CRNA project.\n\nWhy use CRNA when it's using Expo under the hood?\n\nOr should I use Expo instead?\n\nA simple summary for the differences between CRNA and exp are:\n- CRNA does not require an Expo account\n- Expo project provides built binaries for app / play store distribution. (For CRNA app, we need to detach the app)\n- Expo has some API that are not available on CRNA, like Push Notification.\n\nWell if that doesn't give you enough of details for making a decision.\n\nI would say go for Expo to access the Expo ecosystem and ways of distributing app.\n\nExpo is excellent for development and testing(distribution with just sharing link/QR code).\n\nBoth CRNA and Expo are beginner friendly. You can start building apps with all the tools that is available to date, without knowing much about native development.\n\nAnd when you are getting better in developing in React Native, try move to use vanilla React Native project with `react-native init`.\n<br />\n<hr />\n<br />\n\n#### react-native init\n\nExpo/CRNA has it's limitation, and it is when you need to link native modules or write custom native code that are not supported by Expo.\n\nSo far using `react-native init` is my favourite.\n\nIt could be overwhelming at first dealing with native dependencies, Xcode and build binaries on your own.\nBut you are in control.\n\nEventually when you app is complicated enough or have some unique feature that are not in the list of supported libraries by Expo, you need to `detach`/`eject` your Expo app.\n\nYou have more works setting up app distribution with services like `TestFlight`(iOS) or `Fabric`(iOS, Android),\nbut it is getting easier with tools like `fastlane`\n\nAlso you can setup CI/CD for test automation and distribution when you have more control over your build process.\n\nWhile it is not necessarily that it is required for all apps(especially prototypes or MVP) to have a CI/CD service, that could be the way to go forward beyond MVP phase.\n\n<br />\n<hr />\n<br />\n\n#### Conclusion\n\n`react-native init` is my favourite tool, giving more controls over the build process and flexibility to add custom modules without going through detachment of app from Expo/CRNA.\n\nThat's just my personal preference.\n\nExpo and CRNA are great and definitely fun to work with for experimenting features and libraries. And is going to keep improving with the effort of great team behind the project.\n\nI will share about some of the features that require custom code that made me stick to `react-native init` when working on new project to stay flexible with the implementations.\n\nStay tuned.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/04/17-crna-expo-rn-init/index.md","timeToRead":4},{"slug":"docker-dev-mode","frontmatter":{"path":"/blog/docker-dev-mode","date":"2018-04-12T00:42:02.962Z","title":"Docker development mode","excerpt":"Making code changes in container","tags":["docker"]},"content":"\nDocker is helpful in a lot of ways.\n\nToday, after dockerizing an application's services into different containers,\nI ran into situation where I need to make changes to the code of one of the container that serves API.\n\nWell, docker dev mode is not really a thing/command that available out of the box.\nThough there are different ways to do it, I eventually did it with ``volumes``.\n\n\n    volumes:\n      - /Users/yourDir/yourAwesomeApp:/var/www/yourAwesomeApp\n\nIt is a concept of docker which let you ``mount`` a host to your container.\n\nAny changes you made to your host machine will be reflected in the container, without the need to stop and compose the services again.\n\nI will be sure to explore this topic deeper in the future.\n\nVisit my blog again in the future if you want to know more about my exploration with docker :)\n\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/04/12-docker-dev-mode.md","timeToRead":1},{"slug":"starting-a-blog","frontmatter":{"path":"/blog/starting-a-blog","date":"2018-04-07T17:18:02.962Z","title":"Starting a blog","excerpt":"Spread your ideas via blogging"},"content":"\nHave you ever wanted to start your own blog?\n\nI set this blog up with [Gatsby.js](https://www.gatsbyjs.org/).\nIf you are a developer and has always wanted to start writing on your blog, setting one up yourself with gatsby.js would be rewarding.\nThough you have to spend significant amount of time to get your blog up and running and look attractive, it is fun to do, at least for one time.\n\nWhile you can setup your own blog, there is an alternative to get started faster: write on existing blogging platform.\n\nTo name a few of them:\n1. [Medium](https://medium.com/)\n2. [Blogger](https://www.blogger.com)\n\nBasically you just need to sign up on the platform and start writing.\n\nHere are some of the advantages to get started with existing blogging platform right away.\n\n1. Existing audience\n2. Just focus on writing\n\nWhile you can't leverage on existing audiences if you are hosting this your own, you have more control over your blog. You can customise the look and feel, add features that are necessary for your blog.\n\nYour content will take care of getting to your audience themselves! (Well actually, not without some work).\n\nHowever, hey! You have your own blog :)\n\nWhichever way is suitable for you, the point is to get started.\nSpread ideas by blogging.\nSo, let's just start writing today if blogging is what you always wanted to do!\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2018/04/07-render-media.md","timeToRead":2}]},"__N_SSG":true}