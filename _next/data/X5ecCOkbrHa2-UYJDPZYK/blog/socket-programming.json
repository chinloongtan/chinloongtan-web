{"pageProps":{"post":{"content":"\nAbout 3 months ago, I am looking to build an app as a side project to explore different type of application that can be built with React Native.\n\nAfter a quick round of idea selection, I decided to build a [file transfer app](https://play.google.com/store/apps/details?id=app.mvphub.filelinkup). Part of the consideration being it scratches my own itch as I regularly transfer files between my Android and iOS devices.\n\n#### 1. Requirements\n\nApp should works\n\n- Offline\n- Send original file without compression / loss of quality\n\n#### 2. Journey\n\nInitial attempt was to use bluetooth to achieve that. Since wearables and devices connect and sync data from each other as I experienced it.\nPlus back in the days before cloud solutions, bluetooth file sharing was working okay.\n\nBluetooth technology quickly confuses me it's variation like bluetooth vs. bluetooth low energy (BLE), scanning and connecting devices are a big hurdle before getting into transmitting data between devices.\n\nThen, I am looking for feasible alternative and arrived at a WiFi network approach with TCP socket.\nI am familiar with the paradigm with my experiences working with chat and video streaming applications.\n\nA quick test of the setup with TCP server and client proofs that connecting devices are easier, and sending text data was achieved shortly after.\n\n---\n\nThe first challenge surfaced and it was me asking myself \"How to send image using text string?\".\n\nNot long after that, I added a image picker library into the app and using the `base64` encoding to get text string, which will be used to send over the connection.\n\nWhile sending the image with `base64` from one side to the other has no issue, another challenge quickly arise.\n\n\"How to know if the file content has finished sending?\" This is so that I can call the `save` function on the receiver, to save the file content.\n\nBrowsing through the internet, I understand that socket will continuously listening to data. It is up to me to either close the socket, and the last bit of data will be flushed out of the buffer and I can save the file when the event `onClose` is triggered.\n\nThat works if I am sending a single file, but what if I am sending multiple files (let's say 100) in one go?\n\nNow the alternative is to send a special string as a delimiter to indicate the termination of the file content.\n\nWith `base64` encoding, `@` is surely not part of the character that will exists, therefore it is a good candidate for this use case.\n\n---\n\nTo think about data in socket connection is to imagine it as a continous string of data that keeps notify you when something new arrived.\n\nNow that I know what to look for to split the data with a delimiter (let's call it `@END@`), here comes the other challenge: knowing where does the file content starts.\n\nThere is a need to transmit information other than the file content. For example, information that informs sender to update the UI when the client successfully saved the file, or data that used for chat messages.\n\nWith the same approach used to determine the `@END@` of a content, now I need to have it for the beginning of a content, (let's call it `@HEAD@`).\n\nNow we are able to separate a whole chunk of content from start to end by identifying `@HEAD@` and `@END@`, regardless whether the content is a file content, or a stringified string.\n\n---\n\nWhen we are sending something in socket, it will not always send it out immediately. There is a concept known as `buffer` that keeps collecting the data and send it out in one go, and we have no control over when it will send out or wait.\n\nWe can imagine it as a waiting area for data to pile up and send out when it is ready.\n\nThis behaviour is important to understand because we need to design our system to be able to process the transmitted data that are not guaranteed to be in it's own chunk from the sender's intention.\n\n---\n\n-_Part 3 end_-\n","frontmatter":{"path":"/blog/socket-programming","date":"2023-11-08T09:30:00.000Z","title":"Socket programming","excerpt":"File transfer application","tags":["react-native","node.js"]},"fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2023/11/08-socket-programming/index.md","timeToRead":3}},"__N_SSG":true}