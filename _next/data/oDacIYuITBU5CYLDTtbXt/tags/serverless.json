{"pageProps":{"posts":[{"slug":"cloudflare-workers-first-impression","frontmatter":{"path":"/blog/cloudflare-workers-first-impression","date":"2022-12-08T21:16:00.000Z","title":"Cloudflare workers first impression","excerpt":"Overall positive impression and amazing product","tags":["serverless"]},"content":"\nI am looking for alternative solution after Heroku free dynos are no longer available.\nBasically what I am trying to achieve is to host my API services and I stumbled upon serverless solution.\nIt is a very small application with only 3 endpoints to serve, and I am thinking to give serverless a try.\n\nThere are two options that are viable for me.\n\n1. Cloudflare workers\n2. Firebase functions (will write about this in future blog)\n\nAfter experiment with Cloudflare workers. Here are my thoughts about it.\n\n<hr />\n<br />\n\n#### Cloudflare workers\n\n1. Very easy to get started\n\n    With the `wrangler` tool and good documentations. I managed to get a worker up and running and publish it in no time.\n\n\n2. Development experience is good\n\n    Changes in files are reflected immediately without having to restart dev server.\n\n\n3. Deployment is simple\n\n    Hassle free and quick. Make changes and deploy and the endpoints are live.\n\n\n4. APIs are fast\n\n    Not to mention the API response are pretty fast, that's a bonus.\n\n\n5. Managing environment variables for staging and production are easy\n\n    Even come with encrypted options for sensitive data and can be configured from dashboard or CLI.\n\n\n*However*\n\n6. It is JS runtime, not node environment.\n\n    For my case, it's not working for some of the existing API, due to dependency on external node package, `stripe`.\n    However I managed to get it to work with `node_compat = true`, but other packages doesn't work well, like `firebase-admin`.\n    I can get around that with Restful API provided by Firebase and Google, but I need to rewrite existing code that is working already from using SDK to using Restful APIs.\n\n\n<br />\n\nDespite I didn't go with Cloudflare workers, given that it's not the right tool in my use case, cause I need to run the existing project without rewriting it, but it is very promising product and I would definitely revisit it for my future projects.\n\nThat's it!\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/12/08-cloudflare-workers-first-impression/index.md","timeToRead":2},{"slug":"running-express-app-in-firebase-cloud-functions","frontmatter":{"path":"/blog/running-express-app-in-firebase-cloud-functions","date":"2022-12-16T01:55:00.000Z","title":"Running Express app in Firebase Cloud Functions","excerpt":"Works out of the box","tags":["serverless"]},"content":"\nA couple of years after my first serverless hands-on with Firebase Cloud Functions, I've revisited it I am amazed by the fact that Express app will work out of the box in Cloud Functions.\n\nThis will be the perfect for my use case to serve API endpoints from existing project written in Express app.\n\nI can now seamlesssly make transition to cloud functions, and that is exactly what I am looking for!\n\nIt's simple to get the existing Express app up and running with minimal changes of code, not to mention that it's also easy to get started and deploy with Cloud Functions.\n\n<hr />\n<br />\n\nOnly a few things to take note:\n\n1. Development without hot reload.\n\n    As I am developing with the firebase emulators, I noticed that file changes saved are not reflected without restarting the emulators. There might be an option in the CLI that can be enabled that I didn't know of.\n\n\n2. Managing environment variables for staging and production are not what I am used to\n\n    For sensitive information, I used `Google Secret Manager` to store the key-value pair secret. It is more secure than storing in `.env` in Cloud Functions, however I can't use the same environment variable name for different environment. For example, I now need to have `MY_SECRET` and `MY_SECRET_STAGING` for different environment. I am looking for other ways to do it in the future but I am now settled with it.\n\n    It is suggested that I should create another cloud functions project to serve staging environment, but in my use case, I use another Express app instead, and it works well for my scenario.\n\n\n<br />\n\nI didn't spent a lot of time this time exploring how things should be done in Firebase Cloud Functions. However, I am happy that I don't have to spend more time to get my existing project up and running again.\n\nFirebase Cloud Functions saved me from having to rewrite the app, and I am happy about it. Do check that out for your next projects.\n\nCheers.\n","fullPath":"/Users/chinloong/makespace/chinloongtan-web/src/content/blog/2022/12/16-running-express-app-in-firebase-cloud-functions/index.md","timeToRead":2}],"totalCount":2,"tag":"serverless"},"__N_SSG":true}