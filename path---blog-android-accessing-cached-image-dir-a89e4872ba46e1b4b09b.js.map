{"version":3,"sources":["webpack:///path---blog-android-accessing-cached-image-dir-a89e4872ba46e1b4b09b.js","webpack:///./.cache/json/blog-android-accessing-cached-image-dir.json"],"names":["webpackJsonp","494","module","exports","data","markdownRemark","html","frontmatter","date","path","title","excerpt","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4wCAAAC,aAAkyCC,KAAA,gBAAAC,KAAA,2CAAAC,MAAA,6CAAAC,QAAA,gBAAAC,MAAA,6BAA4LC","file":"path---blog-android-accessing-cached-image-dir-a89e4872ba46e1b4b09b.js","sourcesContent":["webpackJsonp([55911121633771],{\n\n/***/ 494:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>You take a picture from your app, and get back an uri in return.</p>\\n<p>Then you proceed to upload the photo to server. End of story.</p>\\n<p>As a developer, you know that's not always the case, sometimes it's a bit more complicated, you take a snapshot from within the app,\\nand realized that it returns black image.</p>\\n<p>So you want to debug, and without uploading to server, you can't access to the file,\\nto take a look at the state of the image, whether your code changes has fixed the issue or not.</p>\\n<p>Or you want to manipulate the image before uploading.</p>\\n<p>For whatever reason, you want to access to the file in cache.</p>\\n<p>After few failed attempts to get it via tools like <code>Android File Transfer</code> and others\\nthat can access to the Android file system.</p>\\n<p>I found the solution with <code>adb</code> cli, and here is how to do it, from your Android device.</p>\\n<pre><code>adb shell \\\"run-as com.yourapp.bundle cat '/data/user/0/com.yourapp.bundle/cache/ReactNative-image1215816883788.jpg' > '/sdcard/DCIM/ReactNative-image1215816883788.jpg'\\\"\\n\\nadb pull \\\"/sdcard/DCIM/ReactNative-image1215816883788.jpg\\\"\\n</code></pre>\\n<p>That's it!</p>\\n<p>Now, check your current directory for the file <code>ReactNative-image1215816883788.jpg</code></p>\",\"frontmatter\":{\"date\":\"July 26, 2020\",\"path\":\"/blog/android-accessing-cached-image-dir\",\"title\":\"Access to android files in cache directory\",\"excerpt\":\"Using adb cli\",\"tags\":[\"react-native\",\"android\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-android-accessing-cached-image-dir-a89e4872ba46e1b4b09b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>You take a picture from your app, and get back an uri in return.</p>\\n<p>Then you proceed to upload the photo to server. End of story.</p>\\n<p>As a developer, you know that's not always the case, sometimes it's a bit more complicated, you take a snapshot from within the app,\\nand realized that it returns black image.</p>\\n<p>So you want to debug, and without uploading to server, you can't access to the file,\\nto take a look at the state of the image, whether your code changes has fixed the issue or not.</p>\\n<p>Or you want to manipulate the image before uploading.</p>\\n<p>For whatever reason, you want to access to the file in cache.</p>\\n<p>After few failed attempts to get it via tools like <code>Android File Transfer</code> and others\\nthat can access to the Android file system.</p>\\n<p>I found the solution with <code>adb</code> cli, and here is how to do it, from your Android device.</p>\\n<pre><code>adb shell \\\"run-as com.yourapp.bundle cat '/data/user/0/com.yourapp.bundle/cache/ReactNative-image1215816883788.jpg' > '/sdcard/DCIM/ReactNative-image1215816883788.jpg'\\\"\\n\\nadb pull \\\"/sdcard/DCIM/ReactNative-image1215816883788.jpg\\\"\\n</code></pre>\\n<p>That's it!</p>\\n<p>Now, check your current directory for the file <code>ReactNative-image1215816883788.jpg</code></p>\",\"frontmatter\":{\"date\":\"July 26, 2020\",\"path\":\"/blog/android-accessing-cached-image-dir\",\"title\":\"Access to android files in cache directory\",\"excerpt\":\"Using adb cli\",\"tags\":[\"react-native\",\"android\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-android-accessing-cached-image-dir.json\n// module id = 494\n// module chunks = 55911121633771"],"sourceRoot":""}