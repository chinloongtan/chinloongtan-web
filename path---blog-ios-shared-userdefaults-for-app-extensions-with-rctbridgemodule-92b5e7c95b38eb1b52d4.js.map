{"version":3,"sources":["webpack:///path---blog-ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule-92b5e7c95b38eb1b52d4.js","webpack:///./.cache/json/blog-ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule.json"],"names":["webpackJsonp","511","module","exports","data","markdownRemark","html","frontmatter","date","path","title","excerpt","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,u7IAA4vIC,aAAqPC,KAAA,mBAAAC,KAAA,wEAAAC,MAAA,kEAAAC,QAAA,2DAAAC,MAAA,yBAAwRC","file":"path---blog-ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule-92b5e7c95b38eb1b52d4.js","sourcesContent":["webpackJsonp([229970524233606],{\n\n/***/ 511:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>In this blog post, I will share the code for a simple RCTBridgeModule that can write/read key-value from React Native.</p>\\n<p>The use case for this is to access the data in iOS Share Extension using value set from React Native.</p>\\n<p>So that the Share Extension can perform API call with sufficient data that was set in React Native, and thus giving user a much better experience similar to other natively built apps. This is a much more complicated implementation and there are much simpler ways to get it done without writing too many native code and that will be for another blog post.</p>\\n<p>Let's get back and focus on this topic, get and set value in <code>UserDefaults</code> that are accesible in Share Extension.\\nIn order to achieve that, we need to use <code>UserDefaults</code> with <code>suiteName</code> that starts with <code>group.</code>.</p>\\n<p>Before you proceed, please make sure that you have already created Share Extension and updated <code>App Groups</code> in the <code>Signing &#x26; Capabilities</code>.\\nThis is not covered in this post and there are alot of online resources for this topic.</p>\\n<hr />\\n<br />\\n<h5>1. First, create a header file in xcode.</h5>\\n<p>I'll name it <code>SharedUserDefaults.h</code></p>\\n<pre><code>#ifndef SharedUserDefaults_h\\n#define SharedUserDefaults_h\\n#endif\\n\\n#import &#x3C;Foundation/Foundation.h>\\n\\n#if __has_include(&#x3C;React/RCTAssert.h>)\\n#import &#x3C;React/RCTBridgeModule.h>\\n#else\\n#import \\\"RCTBridgeModule.h\\\"\\n#endif\\n\\n@interface SharedUserDefaults : NSObject &#x3C;RCTBridgeModule>\\n@end\\n</code></pre>\\n<br />\\n<h5>2. Then, create the implementation file.</h5>\\n<p><code>SharedUserDefaults.m</code></p>\\n<pre><code>#import &#x3C;Foundation/Foundation.h>\\n#import \\\"SharedUserDefaults.h\\\"\\n\\n@implementation SharedUserDefaults\\n\\nRCT_EXPORT_MODULE()\\n\\n+ (BOOL)requiresMainQueueSetup\\n{\\n  return YES;\\n}\\n\\nRCT_EXPORT_METHOD(set:(NSString *)suiteName\\n                  key:(NSString *)keyName\\n                  value:(NSString *)value)\\n{\\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\\n  [shareExtensionDefaults setObject:value forKey:keyName];\\n  NSLog(@\\\"val written %@\\\", value);\\n}\\n\\nRCT_EXPORT_METHOD(get:(NSString *)suiteName\\n                  key:(NSString *)keyName\\n                  resolver: (RCTPromiseResolveBlock)resolve\\n                  rejecter:(RCTPromiseRejectBlock)reject)\\n{\\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\\n  NSString *val = [shareExtensionDefaults stringForKey:keyName];\\n  if (val == nil) {\\n    NSError *error = [NSError errorWithDomain:@\\\"org.reactjs.native.example.Bill\\\" code:0 userInfo:@{ @\\\"message\\\": @\\\"Empty\\\" }];\\n    reject(@\\\"error\\\", @\\\"error description\\\", error);\\n  } else {\\n    resolve(val);\\n  }\\n}\\n\\n@end\\n</code></pre>\\n<br />\\n<h5>3. Next, build and run your app.</h5>\\n<p>And you can use the methods from the native module you've just written.</p>\\n<p>In your React Native project, you can now get and set key-value pair to UserDefaults via the native module.</p>\\n<pre><code>import { NativeModules } from 'react-native';\\n\\nconst SharedUserDefaults = NativeModules.SharedUserDefaults;\\n\\n// Usage\\n\\n// Set\\nSharedUserDefaults.set(\\\"group.org.reactjs.native.example.YourProject\\\", \\\"yourKey\\\", \\\"some string to be stored\\\");\\n\\n// Get\\nlet val = await SharedUserDefaults.get(\\\"group.org.reactjs.native.example.YourProject\\\", \\\"yourKey\\\");\\n</code></pre>\\n<p>In iOS, the value can be retrieved in <code>ShareViewController.swift</code> or <code>AppDelegate.m</code>.</p>\\n<p><code>Swift</code></p>\\n<pre><code>var userDefaults = UserDefaults(suiteName: \\\"group.org.reactjs.native.example.YourProject\\\")\\n\\n// Get value stored earlier\\nlet storedValue = userDefaults?.object(forKey: \\\"yourKey\\\") as? String\\n\\n // Set new value\\nuserDefaults?.set(\\\"some string to be stored\\\", forKey: \\\"yourKey\\\")\\n</code></pre>\\n<p><code>Obj-C</code></p>\\n<pre><code>  NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName: @\\\"group.org.reactjs.native.example.YourProject\\\"];\\n\\n  // Get value stored earlier\\n  NSString *val = [userDefaults stringForKey:@\\\"yourKey\\\"];\\n\\n  // Set new value\\n  [userDefaults setObject:@\\\"some string to be stored\\\" forKey:@\\\"yourKey\\\"];\\n</code></pre>\\n<br />\\n<h4>End</h4>\\n<p>You are now all set!</p>\\n<p>Now you can set value from React Native and retrieve it in your <code>ShareViewController.swift</code>.</p>\\n<p>That's it! Hope it helps.</p>\\n<p>Cheers.</p>\",\"frontmatter\":{\"date\":\"January 20, 2022\",\"path\":\"/blog/ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule\",\"title\":\"iOS Shared UserDefaults for App Extensions With RCTBridgeModule\",\"excerpt\":\"Get/Set key-value from both React Native and Swift/Obj-C\",\"tags\":[\"react-native\",\"ios\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule-92b5e7c95b38eb1b52d4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>In this blog post, I will share the code for a simple RCTBridgeModule that can write/read key-value from React Native.</p>\\n<p>The use case for this is to access the data in iOS Share Extension using value set from React Native.</p>\\n<p>So that the Share Extension can perform API call with sufficient data that was set in React Native, and thus giving user a much better experience similar to other natively built apps. This is a much more complicated implementation and there are much simpler ways to get it done without writing too many native code and that will be for another blog post.</p>\\n<p>Let's get back and focus on this topic, get and set value in <code>UserDefaults</code> that are accesible in Share Extension.\\nIn order to achieve that, we need to use <code>UserDefaults</code> with <code>suiteName</code> that starts with <code>group.</code>.</p>\\n<p>Before you proceed, please make sure that you have already created Share Extension and updated <code>App Groups</code> in the <code>Signing &#x26; Capabilities</code>.\\nThis is not covered in this post and there are alot of online resources for this topic.</p>\\n<hr />\\n<br />\\n<h5>1. First, create a header file in xcode.</h5>\\n<p>I'll name it <code>SharedUserDefaults.h</code></p>\\n<pre><code>#ifndef SharedUserDefaults_h\\n#define SharedUserDefaults_h\\n#endif\\n\\n#import &#x3C;Foundation/Foundation.h>\\n\\n#if __has_include(&#x3C;React/RCTAssert.h>)\\n#import &#x3C;React/RCTBridgeModule.h>\\n#else\\n#import \\\"RCTBridgeModule.h\\\"\\n#endif\\n\\n@interface SharedUserDefaults : NSObject &#x3C;RCTBridgeModule>\\n@end\\n</code></pre>\\n<br />\\n<h5>2. Then, create the implementation file.</h5>\\n<p><code>SharedUserDefaults.m</code></p>\\n<pre><code>#import &#x3C;Foundation/Foundation.h>\\n#import \\\"SharedUserDefaults.h\\\"\\n\\n@implementation SharedUserDefaults\\n\\nRCT_EXPORT_MODULE()\\n\\n+ (BOOL)requiresMainQueueSetup\\n{\\n  return YES;\\n}\\n\\nRCT_EXPORT_METHOD(set:(NSString *)suiteName\\n                  key:(NSString *)keyName\\n                  value:(NSString *)value)\\n{\\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\\n  [shareExtensionDefaults setObject:value forKey:keyName];\\n  NSLog(@\\\"val written %@\\\", value);\\n}\\n\\nRCT_EXPORT_METHOD(get:(NSString *)suiteName\\n                  key:(NSString *)keyName\\n                  resolver: (RCTPromiseResolveBlock)resolve\\n                  rejecter:(RCTPromiseRejectBlock)reject)\\n{\\n  NSUserDefaults *shareExtensionDefaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];\\n  NSString *val = [shareExtensionDefaults stringForKey:keyName];\\n  if (val == nil) {\\n    NSError *error = [NSError errorWithDomain:@\\\"org.reactjs.native.example.Bill\\\" code:0 userInfo:@{ @\\\"message\\\": @\\\"Empty\\\" }];\\n    reject(@\\\"error\\\", @\\\"error description\\\", error);\\n  } else {\\n    resolve(val);\\n  }\\n}\\n\\n@end\\n</code></pre>\\n<br />\\n<h5>3. Next, build and run your app.</h5>\\n<p>And you can use the methods from the native module you've just written.</p>\\n<p>In your React Native project, you can now get and set key-value pair to UserDefaults via the native module.</p>\\n<pre><code>import { NativeModules } from 'react-native';\\n\\nconst SharedUserDefaults = NativeModules.SharedUserDefaults;\\n\\n// Usage\\n\\n// Set\\nSharedUserDefaults.set(\\\"group.org.reactjs.native.example.YourProject\\\", \\\"yourKey\\\", \\\"some string to be stored\\\");\\n\\n// Get\\nlet val = await SharedUserDefaults.get(\\\"group.org.reactjs.native.example.YourProject\\\", \\\"yourKey\\\");\\n</code></pre>\\n<p>In iOS, the value can be retrieved in <code>ShareViewController.swift</code> or <code>AppDelegate.m</code>.</p>\\n<p><code>Swift</code></p>\\n<pre><code>var userDefaults = UserDefaults(suiteName: \\\"group.org.reactjs.native.example.YourProject\\\")\\n\\n// Get value stored earlier\\nlet storedValue = userDefaults?.object(forKey: \\\"yourKey\\\") as? String\\n\\n // Set new value\\nuserDefaults?.set(\\\"some string to be stored\\\", forKey: \\\"yourKey\\\")\\n</code></pre>\\n<p><code>Obj-C</code></p>\\n<pre><code>  NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName: @\\\"group.org.reactjs.native.example.YourProject\\\"];\\n\\n  // Get value stored earlier\\n  NSString *val = [userDefaults stringForKey:@\\\"yourKey\\\"];\\n\\n  // Set new value\\n  [userDefaults setObject:@\\\"some string to be stored\\\" forKey:@\\\"yourKey\\\"];\\n</code></pre>\\n<br />\\n<h4>End</h4>\\n<p>You are now all set!</p>\\n<p>Now you can set value from React Native and retrieve it in your <code>ShareViewController.swift</code>.</p>\\n<p>That's it! Hope it helps.</p>\\n<p>Cheers.</p>\",\"frontmatter\":{\"date\":\"January 20, 2022\",\"path\":\"/blog/ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule\",\"title\":\"iOS Shared UserDefaults for App Extensions With RCTBridgeModule\",\"excerpt\":\"Get/Set key-value from both React Native and Swift/Obj-C\",\"tags\":[\"react-native\",\"ios\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-ios-shared-userdefaults-for-app-extensions-with-rctbridgemodule.json\n// module id = 511\n// module chunks = 229970524233606"],"sourceRoot":""}