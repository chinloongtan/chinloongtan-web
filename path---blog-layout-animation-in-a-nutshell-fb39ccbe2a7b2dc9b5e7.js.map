{"version":3,"sources":["webpack:///path---blog-layout-animation-in-a-nutshell-fb39ccbe2a7b2dc9b5e7.js","webpack:///./.cache/json/blog-layout-animation-in-a-nutshell.json"],"names":["webpackJsonp","500","module","exports","data","markdownRemark","html","frontmatter","date","path","title","excerpt","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,uyCAA4+BC,aAA4VC,KAAA,mBAAAC,KAAA,uCAAAC,MAAA,gCAAAC,QAAA,qDAAAC,MAAA,mBAAyMC","file":"path---blog-layout-animation-in-a-nutshell-fb39ccbe2a7b2dc9b5e7.js","sourcesContent":["webpackJsonp([59142776522394],{\n\n/***/ 500:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Using <code>Animated</code> to animate components in <code>react-native</code> has been the my go to way of doing things for the past few years.</p>\\n<p>Until recently when I discovered that <code>LayoutAnimation</code> can achieve similar result in animating component without the hassle of managing the states of the animation.</p>\\n<p>In this case, I am trying to animate the <code>TextInput</code> of a chat screen, to expand and collapse accordingly when the input starts receiving text, or when it's been cleared.</p>\\n<p>Below is the comparison:</p>\\n<img src=\\\"/layoutAnimation-before-1cf898838058a3c6b2ddc961ed259508.gif\\\" width=\\\"384\\\" height=\\\"868\\\">\\n<img src=\\\"/layoutAnimation-after-bf73284bd8ad75271a3024e71c3b5e3a.gif\\\" width=\\\"384\\\" height=\\\"868\\\">\\n<p>All I did was adding this magical line before setting the <code>props/state</code> that responsible for expanding or collapsing the view.</p>\\n<pre><code>LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\\n</code></pre>\\n<p>This also works great with views with accordions and toggles.</p>\\n<p>It is possible to get it work with <code>Animated</code> but now that this is way much simpler, I think its worth sharing.</p>\\n<p>For more of the detail of using it, check out the official documentation for <code>LayoutAnimation</code>.</p>\",\"frontmatter\":{\"date\":\"January 14, 2021\",\"path\":\"/blog/layout-animation-in-a-nutshell\",\"title\":\"LayoutAnimation in a nutshell\",\"excerpt\":\"Simple and powerfull, even for complicated layouts\",\"tags\":[\"react-native\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-layout-animation-in-a-nutshell-fb39ccbe2a7b2dc9b5e7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Using <code>Animated</code> to animate components in <code>react-native</code> has been the my go to way of doing things for the past few years.</p>\\n<p>Until recently when I discovered that <code>LayoutAnimation</code> can achieve similar result in animating component without the hassle of managing the states of the animation.</p>\\n<p>In this case, I am trying to animate the <code>TextInput</code> of a chat screen, to expand and collapse accordingly when the input starts receiving text, or when it's been cleared.</p>\\n<p>Below is the comparison:</p>\\n<img src=\\\"/layoutAnimation-before-1cf898838058a3c6b2ddc961ed259508.gif\\\" width=\\\"384\\\" height=\\\"868\\\">\\n<img src=\\\"/layoutAnimation-after-bf73284bd8ad75271a3024e71c3b5e3a.gif\\\" width=\\\"384\\\" height=\\\"868\\\">\\n<p>All I did was adding this magical line before setting the <code>props/state</code> that responsible for expanding or collapsing the view.</p>\\n<pre><code>LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\\n</code></pre>\\n<p>This also works great with views with accordions and toggles.</p>\\n<p>It is possible to get it work with <code>Animated</code> but now that this is way much simpler, I think its worth sharing.</p>\\n<p>For more of the detail of using it, check out the official documentation for <code>LayoutAnimation</code>.</p>\",\"frontmatter\":{\"date\":\"January 14, 2021\",\"path\":\"/blog/layout-animation-in-a-nutshell\",\"title\":\"LayoutAnimation in a nutshell\",\"excerpt\":\"Simple and powerfull, even for complicated layouts\",\"tags\":[\"react-native\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-layout-animation-in-a-nutshell.json\n// module id = 500\n// module chunks = 59142776522394"],"sourceRoot":""}