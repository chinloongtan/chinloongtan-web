webpackJsonp([0x71db5092558e],{518:function(e,t){e.exports={data:{markdownRemark:{html:"<p>One of the many things that bother me after my React Native app went public is the app size.</p>\n<p>Big app size is not a show stopper to continue adding new features to my app, nor it causes anything bad.</p>\n<p>So, it has always been the least priority to work on that.</p>\n<p>Some say it costs a bit of performance, if the app size is too big.</p>\n<p>However, it isn't really critical for any newly launched app for a premature optimization, on the app size.</p>\n<p>I've always wanted to fix it (when I have the time), and I think now is the best time, because I can do it for</p>\n<p>multiple projects that I am juggling, with the same optimization trick.</p>\n<p>And, it's really simple.</p>\n<p>NOTE: This is an Android only optimization.</p>\n<h6>Before</h6>\n<p><img src=\"before.png\" alt=\"before\"></p>\n<br />\n<h6>After</h6>\n<p><img src=\"after.png\" alt=\"after\"></p>\n<br />\n<p>You can do it with any <em>ONE</em> of two ways below:</p>\n<h4>1. Android app bundle</h4>\n<p>Simply change your build process from</p>\n<p><code>./gradlew assembleRelease</code></p>\n<p>to</p>\n<p><code>./gradlew bundleRelease</code></p>\n<p>The output will be <code>.aab</code> file instead of <code>.apk</code> file.</p>\n<p>Note that the <code>.aab</code> file will not have any significant file size changes compared to the <code>.apk</code> file.</p>\n<p>The reduction in size will only be visible after uploaded the <code>.aab</code> file to Play Store.</p>\n<br />\n<h4>2. Separate Build by CPU Architecture</h4>\n<p>In your project's <code>android/app/build.gradle</code> file.</p>\n<p>Update the following setting.</p>\n<p><code>def enableSeparateBuildPerCPUArchitecture = true</code></p>\n<pre><code>splits {\n    abi {\n        ...\n        enable enableSeparateBuildPerCPUArchitecture // be sure to enable here as well\n        ...\n    }\n}\n</code></pre>\n<p>Continue to build the apk as usual.</p>\n<p>The output will be multiple <code>.apk</code> files (usually 4).</p>\n<p>Each of the <code>.apk</code> file will have significant reduction in app size.</p>\n<p>Upload all of them to the Play Store for submission.</p>\n<p>Worth to note that, the universal '.apk' file will not be built.</p>\n<p>(The one that support all architecture, thus the heavy size.)</p>\n<p>If you want it to be in the output apk, along with the others, change the following setting.</p>\n<pre><code>splits {\n    abi {\n        ...\n        enable enableSeparateBuildPerCPUArchitecture\n        universalApk true  // If true, also generate a universal APK\n        ...\n    }\n}\n</code></pre>\n<p>Then you will have 5 <code>.apk</code> files in the output folder.</p>\n<p>Read about why enabling the <code>universalApk</code> below.</p>\n<br />\n<hr>\n<br />\n<h4>Which one to use</h4>\n<p>For most of us, switching to use Android App Bundle (aab) is painless.</p>\n<p>Thus, recommended to use it.</p>\n<p>However, here's are some of the things to consider.</p>\n<br />\n<h5>1. Firebase App Distribution does not support (.aab) at the moment.</h5>\n<p>If you use Firebase for internal distribution, you might want to use <code>Separate Build by CPU Architecture</code> approach, together with <code>universalApk</code> enabled.</p>\n<p>What you can do is, use universal apk file for distribution, and the separated <code>.apk</code> files for Play Store submission.</p>\n<p>So, what about if you are using <code>.aab</code> file? How can you distribute the app for internal testing?</p>\n<p>Well, if there are no existing tools that are already integrated into the app, and need to cater for it,\nthen you might want to consider using Play Store's distribution track.</p>\n<p>You can setup automated process to upload the <code>.aab</code> file after building it to the Play Store track.</p>\n<p>This require owner access though.</p>\n<br />\n<h5>2. The reduction in size for both approaches are almost identical.</h5>\n<p>From what I can tell, after experimenting with both approaches, and using both ways for different apps, in production.</p>\n<p>The size reduction benefit is almost identical. In both cases, I got more than 50% in size reduction.</p>\n<p>So the size reduction is not much of a deciding factor. Which makes us move to the next point.</p>\n<br />\n<h5>3. Concern on Android App Bundle's capabilities.</h5>\n<p>For most of the app out there, App Bundle offer hassle-free switch.</p>\n<p>While some of the use cases, it might be more complicated to maintain.</p>\n<p>If you are not sure, refer to official documentation of Android development.</p>\n<p>If you are not convinced, your app doesn't have defined scope and complexity, or your app might\ngrow to eventually having very complicated/advanced use cases, you can stick to separated '.apk' approach.</p>\n<p>Otherwise, using <code>.aab</code> is recommended.</p>\n<p>Well this post is not going to elaborate the differences of '.apk' and '.aab', but it is worth doing your research about the topic.</p>\n<br />\n<hr>\n<br />\n<h4>Conclusion</h4>\n<p>With that said, you will have your Android app with very much reduced size by now!</p>\n<p>For my apps, over 50% in reduction.</p>\n<p>Cheers!</p>\n<p>and</p>\n<p>Happy coding!</p>",frontmatter:{date:"July 19, 2020",path:"/blog/reduce-your-react-native-android-app-size",title:"Reduce your react-native android app size",excerpt:"By 55% with android app bundle (.aab)",tags:["react-native"]}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-reduce-your-react-native-android-app-size-3f54a9334286e6f6bfb2.js.map